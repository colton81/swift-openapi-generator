// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Entity`.
    /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)`.
    func EntityEntityGet(_ input: Operations.EntityEntityGet.Input) async throws -> Operations.EntityEntityGet.Output
    /// Create or Update a single record
    ///
    /// - Remark: HTTP `PATCH /Entity`.
    /// - Remark: Generated from `#/paths//Entity/patch(EntityEntityPatch)`.
    func EntityEntityPatch(_ input: Operations.EntityEntityPatch.Input) async throws
        -> Operations.EntityEntityPatch.Output
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /Entity`.
    /// - Remark: Generated from `#/paths//Entity/delete(EntityEntityDelete)`.
    func EntityEntityDelete(_ input: Operations.EntityEntityDelete.Input) async throws
        -> Operations.EntityEntityDelete.Output
    /// Retrieve a List or DropDown
    ///
    /// - Remark: HTTP `GET /Entity/GetList`.
    /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)`.
    func EntityGetlistGet(_ input: Operations.EntityGetlistGet.Input) async throws -> Operations.EntityGetlistGet.Output
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)`.
    func GLAccountGlaccountGet(_ input: Operations.GLAccountGlaccountGet.Input) async throws
        -> Operations.GLAccountGlaccountGet.Output
    /// Create a single record
    ///
    /// - Remark: HTTP `POST /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)`.
    func GLAccountGlaccountPost(_ input: Operations.GLAccountGlaccountPost.Input) async throws
        -> Operations.GLAccountGlaccountPost.Output
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)`.
    func GLAccountGlaccountPatch(_ input: Operations.GLAccountGlaccountPatch.Input) async throws
        -> Operations.GLAccountGlaccountPatch.Output
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)`.
    func GLAccountGlaccountDelete(_ input: Operations.GLAccountGlaccountDelete.Input) async throws
        -> Operations.GLAccountGlaccountDelete.Output
    /// Retrieve a List or DropDown
    ///
    /// - Remark: HTTP `GET /GLAccount/GetList`.
    /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)`.
    func GLAccountGetlistGet(_ input: Operations.GLAccountGetlistGet.Input) async throws
        -> Operations.GLAccountGetlistGet.Output
    /// Retrieve the static system Account Types
    ///
    /// - Remark: HTTP `GET /Misc/GetAccountTypes`.
    /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)`.
    func MiscGetaccounttypesGet(_ input: Operations.MiscGetaccounttypesGet.Input) async throws
        -> Operations.MiscGetaccounttypesGet.Output
    /// Retrieve a list of US states
    ///
    /// - Remark: HTTP `GET /Misc/GetStates`.
    /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)`.
    func MiscGetstatesGet(_ input: Operations.MiscGetstatesGet.Input) async throws -> Operations.MiscGetstatesGet.Output
    /// Retrieve a single Main note payable record, as well as a SubRecords array that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /NotesPayable`.
    /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)`.
    func NotesPayableNotespayableGet(_ input: Operations.NotesPayableNotespayableGet.Input) async throws
        -> Operations.NotesPayableNotespayableGet.Output
    /// Deletes a Main Note record as well as all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesPayable/DeleteMainNote`.
    /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)`.
    func NotesPayableDeletemainnoteDelete(_ input: Operations.NotesPayableDeletemainnoteDelete.Input) async throws
        -> Operations.NotesPayableDeletemainnoteDelete.Output
    /// Deletes all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesPayable/DeleteSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)`.
    func NotesPayableDeletesubscheduleDelete(_ input: Operations.NotesPayableDeletesubscheduleDelete.Input) async throws
        -> Operations.NotesPayableDeletesubscheduleDelete.Output
    /// Retrieve a list of records
    ///
    /// - Remark: HTTP `GET /NotesPayable/GetList`.
    /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)`.
    func NotesPayableGetlistGet(_ input: Operations.NotesPayableGetlistGet.Input) async throws
        -> Operations.NotesPayableGetlistGet.Output
    /// Create or Update a single Main note record (Generates a LoanNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /NotesPayable/PatchMainNote`.
    /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)`.
    func NotesPayablePatchmainnotePatch(_ input: Operations.NotesPayablePatchmainnotePatch.Input) async throws
        -> Operations.NotesPayablePatchmainnotePatch.Output
    /// Creates Sub schedule records (Bulk insert of multiple records)
    ///
    /// - Remark: HTTP `PATCH /NotesPayable/PatchSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)`.
    func NotesPayablePatchsubschedulePatch(_ input: Operations.NotesPayablePatchsubschedulePatch.Input) async throws
        -> Operations.NotesPayablePatchsubschedulePatch.Output
    /// Retrieve a single Main note receivable record, as well as a SubRecords array that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /NotesReceivable`.
    /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)`.
    func NotesReceivableNotesreceivableGet(_ input: Operations.NotesReceivableNotesreceivableGet.Input) async throws
        -> Operations.NotesReceivableNotesreceivableGet.Output
    /// Deletes a Main Note record as well as all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesReceivable/DeleteMainNote`.
    /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)`.
    func NotesReceivableDeletemainnoteDelete(_ input: Operations.NotesReceivableDeletemainnoteDelete.Input) async throws
        -> Operations.NotesReceivableDeletemainnoteDelete.Output
    /// Deletes all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesReceivable/DeleteSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)`.
    func NotesReceivableDeletesubscheduleDelete(_ input: Operations.NotesReceivableDeletesubscheduleDelete.Input)
        async throws -> Operations.NotesReceivableDeletesubscheduleDelete.Output
    /// Retrieve a list of records
    ///
    /// - Remark: HTTP `GET /NotesReceivable/GetList`.
    /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)`.
    func NotesReceivableGetlistGet(_ input: Operations.NotesReceivableGetlistGet.Input) async throws
        -> Operations.NotesReceivableGetlistGet.Output
    /// Create or Update a single Main note record (Generates a LoanNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /NotesReceivable/PatchMainNote`.
    /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)`.
    func NotesReceivablePatchmainnotePatch(_ input: Operations.NotesReceivablePatchmainnotePatch.Input) async throws
        -> Operations.NotesReceivablePatchmainnotePatch.Output
    /// Creates Sub schedule records (Bulk insert of multiple records)
    ///
    /// - Remark: HTTP `PATCH /NotesReceivable/PatchSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)`.
    func NotesReceivablePatchsubschedulePatch(_ input: Operations.NotesReceivablePatchsubschedulePatch.Input)
        async throws -> Operations.NotesReceivablePatchsubschedulePatch.Output
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Setup/AccountingDefaults`.
    /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)`.
    func SetupAccountingdefaultsGet(_ input: Operations.SetupAccountingdefaultsGet.Input) async throws
        -> Operations.SetupAccountingdefaultsGet.Output
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /Setup/AccountingDefaults`.
    /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)`.
    func SetupAccountingdefaultsPatch(_ input: Operations.SetupAccountingdefaultsPatch.Input) async throws
        -> Operations.SetupAccountingdefaultsPatch.Output
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)`.
    func SetupTermscodesGet(_ input: Operations.SetupTermscodesGet.Input) async throws
        -> Operations.SetupTermscodesGet.Output
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)`.
    func SetupTermscodesPatch(_ input: Operations.SetupTermscodesPatch.Input) async throws
        -> Operations.SetupTermscodesPatch.Output
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)`.
    func SetupTermscodesDelete(_ input: Operations.SetupTermscodesDelete.Input) async throws
        -> Operations.SetupTermscodesDelete.Output
    /// Retrieve a list or dropdown
    ///
    /// - Remark: HTTP `GET /Setup/TermsCodes/GetList`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)`.
    func SetupGetlistGet(_ input: Operations.SetupGetlistGet.Input) async throws -> Operations.SetupGetlistGet.Output
    /// Retrieves the Main transaction record, as well as a SubGrid item that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /Transaction`.
    /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)`.
    func TransactionTransactionGet(_ input: Operations.TransactionTransactionGet.Input) async throws
        -> Operations.TransactionTransactionGet.Output
    /// Deletes a Main transaction record as well as all Sub records
    ///
    /// - Remark: HTTP `DELETE /Transaction/DeleteMain`.
    /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)`.
    func TransactionDeletemainDelete(_ input: Operations.TransactionDeletemainDelete.Input) async throws
        -> Operations.TransactionDeletemainDelete.Output
    /// Deletes a Sub transaction record (Also updates the current balance on the Main record and returns it)
    ///
    /// - Remark: HTTP `DELETE /Transaction/DeleteSub`.
    /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)`.
    func TransactionDeletesubDelete(_ input: Operations.TransactionDeletesubDelete.Input) async throws
        -> Operations.TransactionDeletesubDelete.Output
    /// Retrieve a list of records (Specifically for Transaction Listings that aren't registers)
    ///
    /// - Remark: HTTP `GET /Transaction/GetList`.
    /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)`.
    func TransactionGetlistGet(_ input: Operations.TransactionGetlistGet.Input) async throws
        -> Operations.TransactionGetlistGet.Output
    /// Retrieves a list with a running balance
    ///
    /// - Remark: HTTP `GET /Transaction/GetRegister`.
    /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)`.
    func TransactionGetregisterGet(_ input: Operations.TransactionGetregisterGet.Input) async throws
        -> Operations.TransactionGetregisterGet.Output
    /// Create or Update a single Main transaction record (Generates a TransNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /Transaction/PatchMain`.
    /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)`.
    func TransactionPatchmainPatch(_ input: Operations.TransactionPatchmainPatch.Input) async throws
        -> Operations.TransactionPatchmainPatch.Output
    /// Creates a single Sub transaction record (Also updates the current balance on the Main record and returns it)
    ///
    /// - Remark: HTTP `PATCH /Transaction/PatchSub`.
    /// - Remark: Generated from `#/paths//Transaction/PatchSub/patch(TransactionPatchsubPatch)`.
    func TransactionPatchsubPatch(_ input: Operations.TransactionPatchsubPatch.Input) async throws
        -> Operations.TransactionPatchsubPatch.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://api.mtillholdings.com/v3")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AccountTypesList`.
        public struct AccountTypesList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/AccountTypesList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/AccountTypesList/data/records`.
                public var records: [Components.Schemas.AccountTypesRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.AccountTypesRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/AccountTypesList/data`.
            public var data: Components.Schemas.AccountTypesList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/AccountTypesList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `AccountTypesList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.AccountTypesList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountTypesRecord`.
        public struct AccountTypesRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/AccountTypesRecord/AcctTypeDesc`.
            public var AcctTypeDesc: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountTypesRecord/BSSort`.
            public var BSSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountTypesRecord/PLBS`.
            public var PLBS: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountTypesRecord/PLSort`.
            public var PLSort: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AccountTypesRecord/TypeGroup`.
            public var TypeGroup: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `AccountTypesRecord`.
            ///
            /// - Parameters:
            ///   - AcctTypeDesc:
            ///   - BSSort:
            ///   - PLBS:
            ///   - PLSort:
            ///   - TypeGroup:
            public init(
                AcctTypeDesc: Swift.String? = nil,
                BSSort: Swift.String? = nil,
                PLBS: Swift.String? = nil,
                PLSort: Swift.Int? = nil,
                TypeGroup: Swift.String? = nil
            ) {
                self.AcctTypeDesc = AcctTypeDesc
                self.BSSort = BSSort
                self.PLBS = PLBS
                self.PLSort = PLSort
                self.TypeGroup = TypeGroup
            }
            public enum CodingKeys: String, CodingKey {
                case AcctTypeDesc
                case BSSort
                case PLBS
                case PLSort
                case TypeGroup
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommonResponse`.
        public struct CommonResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/CommonResponse/errorMessage`.
            public var errorMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommonResponse/promptUser`.
            public var promptUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CommonResponse/promptUserMessage`.
            public var promptUserMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommonResponse/status`.
            public var status: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CommonResponse/statusCode`.
            public var statusCode: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CommonResponse/rowsAffected`.
            public var rowsAffected: Swift.Int?
            public var id: UUID = UUID()
            /// Creates a new `CommonResponse`.
            ///
            /// - Parameters:
            ///   - errorMessage:
            ///   - promptUser:
            ///   - promptUserMessage:
            ///   - status:
            ///   - statusCode:
            ///   - rowsAffected:
            public init(
                errorMessage: Swift.String? = nil,
                promptUser: Swift.Bool? = nil,
                promptUserMessage: Swift.String? = nil,
                status: Swift.Bool? = nil,
                statusCode: Swift.Int? = nil,
                rowsAffected: Swift.Int? = nil
            ) {
                self.errorMessage = errorMessage
                self.promptUser = promptUser
                self.promptUserMessage = promptUserMessage
                self.status = status
                self.statusCode = statusCode
                self.rowsAffected = rowsAffected
            }
            public enum CodingKeys: String, CodingKey {
                case errorMessage
                case promptUser
                case promptUserMessage
                case status
                case statusCode
                case rowsAffected
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommonErrorResponse`.
        public struct CommonErrorResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/CommonErrorResponse/errorMessage`.
            public var errorMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommonErrorResponse/promptUser`.
            public var promptUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CommonErrorResponse/promptUserMessage`.
            public var promptUserMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommonErrorResponse/status`.
            public var status: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CommonErrorResponse/statusCode`.
            public var statusCode: Swift.Int?
            public var id: UUID = UUID()
            /// Creates a new `CommonErrorResponse`.
            ///
            /// - Parameters:
            ///   - errorMessage:
            ///   - promptUser:
            ///   - promptUserMessage:
            ///   - status:
            ///   - statusCode:
            public init(
                errorMessage: Swift.String? = nil,
                promptUser: Swift.Bool? = nil,
                promptUserMessage: Swift.String? = nil,
                status: Swift.Bool? = nil,
                statusCode: Swift.Int? = nil
            ) {
                self.errorMessage = errorMessage
                self.promptUser = promptUser
                self.promptUserMessage = promptUserMessage
                self.status = status
                self.statusCode = statusCode
            }
            public enum CodingKeys: String, CodingKey {
                case errorMessage
                case promptUser
                case promptUserMessage
                case status
                case statusCode
            }
        }
        /// - Remark: Generated from `#/components/schemas/Entity`.
        public struct Entity: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/Entity/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/Entity/data/record`.
                public var record: [Components.Schemas.EntityRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - record:
                public init(record: [Components.Schemas.EntityRecord]? = nil) { self.record = record }
                public enum CodingKeys: String, CodingKey { case record }
            }
            /// - Remark: Generated from `#/components/schemas/Entity/data`.
            public var data: Components.Schemas.Entity.dataPayload?
            /// - Remark: Generated from `#/components/schemas/Entity/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `Entity`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.Entity.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntityDelete`.
        public struct EntityDelete: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/EntityDelete/rowsAffected`.
            public var rowsAffected: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/EntityDelete/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `EntityDelete`.
            ///
            /// - Parameters:
            ///   - rowsAffected:
            ///   - status:
            public init(rowsAffected: Swift.Int? = nil, status: Swift.Bool? = nil) {
                self.rowsAffected = rowsAffected
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case rowsAffected
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntityList`.
        public struct EntityList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/EntityList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/EntityList/data/records`.
                public var records: [Components.Schemas.EntityRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.EntityRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/EntityList/data`.
            public var data: Components.Schemas.EntityList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/EntityList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `EntityList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.EntityList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntityPatchResponse`.
        public struct EntityPatchResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/EntityPatchResponse/rowsAffected`.
            public var rowsAffected: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/EntityPatchResponse/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `EntityPatchResponse`.
            ///
            /// - Parameters:
            ///   - rowsAffected:
            ///   - status:
            public init(rowsAffected: Swift.Int? = nil, status: Swift.Bool? = nil) {
                self.rowsAffected = rowsAffected
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case rowsAffected
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntityRecord`.
        public struct EntityRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Address1`.
            public var Address1: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Address2`.
            public var Address2: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/City`.
            public var City: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CreditApprovedBy`.
            public var CreditApprovedBy: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CreditHoldYN`.
            public var CreditHoldYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CreditLimit`.
            public var CreditLimit: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CreditRating`.
            public var CreditRating: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CreditReportingAgency`.
            public var CreditReportingAgency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Department`.
            public var Department: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EditDT`.
            public var EditDT: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EditUserName`.
            public var EditUserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EmailMain`.
            public var EmailMain: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EntityName`.
            public var EntityName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EntityType`.
            public var EntityType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/FirstName`.
            public var FirstName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/IDNo`.
            public var IDNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/InputDT`.
            public var InputDT: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/InputUserName`.
            public var InputUserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/LastName`.
            public var LastName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/LocCode`.
            public var LocCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/MainPhone`.
            public var MainPhone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/MobilePhone`.
            public var MobilePhone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/MiddleName`.
            public var MiddleName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Notes`.
            public var Notes: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/OtherPhone`.
            public var OtherPhone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/PrimaryContact`.
            public var PrimaryContact: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EmergencyName`.
            public var EmergencyName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/EmergencyPhone`.
            public var EmergencyPhone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/DOB`.
            public var DOB: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/SSN`.
            public var SSN: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/HireDate`.
            public var HireDate: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TermDate`.
            public var TermDate: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/ShipAddress1`.
            public var ShipAddress1: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/ShipAddress2`.
            public var ShipAddress2: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/ShipCity`.
            public var ShipCity: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/ShipSt`.
            public var ShipSt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/ShipZip`.
            public var ShipZip: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/State`.
            public var State: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TermsCodeID`.
            public var TermsCodeID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TimeClose`.
            public var TimeClose: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TimeOpen`.
            public var TimeOpen: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/OTExemptYN`.
            public var OTExemptYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/PayFrequency`.
            public var PayFrequency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/AnnualSalary`.
            public var AnnualSalary: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/PayMethod`.
            public var PayMethod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Website`.
            public var Website: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Zip`.
            public var Zip: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/HourlyWage`.
            public var HourlyWage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Exempt1099YN`.
            public var Exempt1099YN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/PayRegGLAcct`.
            public var PayRegGLAcct: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/PayOTGLAcct`.
            public var PayOTGLAcct: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/DDProvider`.
            public var DDProvider: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/DDAccountID`.
            public var DDAccountID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TaxExemptYN`.
            public var TaxExemptYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/TaxState`.
            public var TaxState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/AddWH`.
            public var AddWH: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/FilingStatus`.
            public var FilingStatus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/AccountNo`.
            public var AccountNo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/FID`.
            public var FID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/W9YN`.
            public var W9YN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/CPS`.
            public var CPS: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Send1099YN`.
            public var Send1099YN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/Type1099`.
            public var Type1099: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/DefExpAcct`.
            public var DefExpAcct: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EntityRecord/DefPayAcct`.
            public var DefPayAcct: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `EntityRecord`.
            ///
            /// - Parameters:
            ///   - Address1:
            ///   - Address2:
            ///   - City:
            ///   - CreditApprovedBy:
            ///   - CreditHoldYN:
            ///   - CreditLimit:
            ///   - CreditRating:
            ///   - CreditReportingAgency:
            ///   - Department:
            ///   - EditDT:
            ///   - EditUserName:
            ///   - EmailMain:
            ///   - EntityName:
            ///   - EntityType:
            ///   - FirstName:
            ///   - IDNo:
            ///   - InputDT:
            ///   - InputUserName:
            ///   - LastName:
            ///   - LocCode:
            ///   - MainPhone:
            ///   - MobilePhone:
            ///   - MiddleName:
            ///   - Notes:
            ///   - OtherPhone:
            ///   - PrimaryContact:
            ///   - EmergencyName:
            ///   - EmergencyPhone:
            ///   - DOB:
            ///   - SSN:
            ///   - HireDate:
            ///   - TermDate:
            ///   - ShipAddress1:
            ///   - ShipAddress2:
            ///   - ShipCity:
            ///   - ShipSt:
            ///   - ShipZip:
            ///   - State:
            ///   - TermsCodeID:
            ///   - TimeClose:
            ///   - TimeOpen:
            ///   - OTExemptYN:
            ///   - PayFrequency:
            ///   - AnnualSalary:
            ///   - PayMethod:
            ///   - Website:
            ///   - Zip:
            ///   - HourlyWage:
            ///   - Exempt1099YN:
            ///   - PayRegGLAcct:
            ///   - PayOTGLAcct:
            ///   - DDProvider:
            ///   - DDAccountID:
            ///   - TaxExemptYN:
            ///   - TaxState:
            ///   - AddWH:
            ///   - FilingStatus:
            ///   - AccountNo:
            ///   - FID:
            ///   - W9YN:
            ///   - CPS:
            ///   - Send1099YN:
            ///   - Type1099:
            ///   - DefExpAcct:
            ///   - DefPayAcct:
            public init(
                Address1: Swift.String? = nil,
                Address2: Swift.String? = nil,
                City: Swift.String? = nil,
                CreditApprovedBy: Swift.Int? = nil,
                CreditHoldYN: Swift.Bool? = nil,
                CreditLimit: Swift.Double? = nil,
                CreditRating: Swift.String? = nil,
                CreditReportingAgency: Swift.String? = nil,
                Department: Swift.String? = nil,
                EditDT: Swift.String? = nil,
                EditUserName: Swift.String? = nil,
                EmailMain: Swift.String? = nil,
                EntityName: Swift.String? = nil,
                EntityType: Swift.String? = nil,
                FirstName: Swift.String? = nil,
                IDNo: Swift.Int? = nil,
                InputDT: Foundation.Date? = nil,
                InputUserName: Swift.String? = nil,
                LastName: Swift.String? = nil,
                LocCode: Swift.String? = nil,
                MainPhone: Swift.String? = nil,
                MobilePhone: Swift.String? = nil,
                MiddleName: Swift.String? = nil,
                Notes: Swift.String? = nil,
                OtherPhone: Swift.String? = nil,
                PrimaryContact: Swift.String? = nil,
                EmergencyName: Swift.String? = nil,
                EmergencyPhone: Swift.String? = nil,
                DOB: Swift.String? = nil,
                SSN: Swift.String? = nil,
                HireDate: Foundation.Date? = nil,
                TermDate: Foundation.Date? = nil,
                ShipAddress1: Swift.String? = nil,
                ShipAddress2: Swift.String? = nil,
                ShipCity: Swift.String? = nil,
                ShipSt: Swift.String? = nil,
                ShipZip: Swift.String? = nil,
                State: Swift.String? = nil,
                TermsCodeID: Swift.Int? = nil,
                TimeClose: Foundation.Date? = nil,
                TimeOpen: Foundation.Date? = nil,
                OTExemptYN: Swift.Bool? = nil,
                PayFrequency: Swift.String? = nil,
                AnnualSalary: Swift.Double? = nil,
                PayMethod: Swift.String? = nil,
                Website: Swift.String? = nil,
                Zip: Swift.String? = nil,
                HourlyWage: Swift.Double? = nil,
                Exempt1099YN: Swift.Bool? = nil,
                PayRegGLAcct: Swift.String? = nil,
                PayOTGLAcct: Swift.String? = nil,
                DDProvider: Swift.String? = nil,
                DDAccountID: Swift.String? = nil,
                TaxExemptYN: Swift.Bool? = nil,
                TaxState: Swift.String? = nil,
                AddWH: Swift.Double? = nil,
                FilingStatus: Swift.String? = nil,
                AccountNo: Swift.String? = nil,
                FID: Swift.String? = nil,
                W9YN: Swift.Bool? = nil,
                CPS: Swift.String? = nil,
                Send1099YN: Swift.Bool? = nil,
                Type1099: Swift.String? = nil,
                DefExpAcct: Swift.String? = nil,
                DefPayAcct: Swift.String? = nil
            ) {
                self.Address1 = Address1
                self.Address2 = Address2
                self.City = City
                self.CreditApprovedBy = CreditApprovedBy
                self.CreditHoldYN = CreditHoldYN
                self.CreditLimit = CreditLimit
                self.CreditRating = CreditRating
                self.CreditReportingAgency = CreditReportingAgency
                self.Department = Department
                self.EditDT = EditDT
                self.EditUserName = EditUserName
                self.EmailMain = EmailMain
                self.EntityName = EntityName
                self.EntityType = EntityType
                self.FirstName = FirstName
                self.IDNo = IDNo
                self.InputDT = InputDT
                self.InputUserName = InputUserName
                self.LastName = LastName
                self.LocCode = LocCode
                self.MainPhone = MainPhone
                self.MobilePhone = MobilePhone
                self.MiddleName = MiddleName
                self.Notes = Notes
                self.OtherPhone = OtherPhone
                self.PrimaryContact = PrimaryContact
                self.EmergencyName = EmergencyName
                self.EmergencyPhone = EmergencyPhone
                self.DOB = DOB
                self.SSN = SSN
                self.HireDate = HireDate
                self.TermDate = TermDate
                self.ShipAddress1 = ShipAddress1
                self.ShipAddress2 = ShipAddress2
                self.ShipCity = ShipCity
                self.ShipSt = ShipSt
                self.ShipZip = ShipZip
                self.State = State
                self.TermsCodeID = TermsCodeID
                self.TimeClose = TimeClose
                self.TimeOpen = TimeOpen
                self.OTExemptYN = OTExemptYN
                self.PayFrequency = PayFrequency
                self.AnnualSalary = AnnualSalary
                self.PayMethod = PayMethod
                self.Website = Website
                self.Zip = Zip
                self.HourlyWage = HourlyWage
                self.Exempt1099YN = Exempt1099YN
                self.PayRegGLAcct = PayRegGLAcct
                self.PayOTGLAcct = PayOTGLAcct
                self.DDProvider = DDProvider
                self.DDAccountID = DDAccountID
                self.TaxExemptYN = TaxExemptYN
                self.TaxState = TaxState
                self.AddWH = AddWH
                self.FilingStatus = FilingStatus
                self.AccountNo = AccountNo
                self.FID = FID
                self.W9YN = W9YN
                self.CPS = CPS
                self.Send1099YN = Send1099YN
                self.Type1099 = Type1099
                self.DefExpAcct = DefExpAcct
                self.DefPayAcct = DefPayAcct
            }
            public enum CodingKeys: String, CodingKey {
                case Address1
                case Address2
                case City
                case CreditApprovedBy
                case CreditHoldYN
                case CreditLimit
                case CreditRating
                case CreditReportingAgency
                case Department
                case EditDT
                case EditUserName
                case EmailMain
                case EntityName
                case EntityType
                case FirstName
                case IDNo
                case InputDT
                case InputUserName
                case LastName
                case LocCode
                case MainPhone
                case MobilePhone
                case MiddleName
                case Notes
                case OtherPhone
                case PrimaryContact
                case EmergencyName
                case EmergencyPhone
                case DOB
                case SSN
                case HireDate
                case TermDate
                case ShipAddress1
                case ShipAddress2
                case ShipCity
                case ShipSt
                case ShipZip
                case State
                case TermsCodeID
                case TimeClose
                case TimeOpen
                case OTExemptYN
                case PayFrequency
                case AnnualSalary
                case PayMethod
                case Website
                case Zip
                case HourlyWage
                case Exempt1099YN
                case PayRegGLAcct
                case PayOTGLAcct
                case DDProvider
                case DDAccountID
                case TaxExemptYN
                case TaxState
                case AddWH
                case FilingStatus
                case AccountNo
                case FID
                case W9YN
                case CPS
                case Send1099YN
                case Type1099
                case DefExpAcct
                case DefPayAcct
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error400`.
        public struct Error400: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/Error400/errors`.
            public struct errorsPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/Error400/errors/ListType`.
                public var ListType: [Swift.String]?
                public var id: UUID = UUID()
                /// Creates a new `errorsPayload`.
                ///
                /// - Parameters:
                ///   - ListType:
                public init(ListType: [Swift.String]? = nil) { self.ListType = ListType }
                public enum CodingKeys: String, CodingKey { case ListType }
            }
            /// - Remark: Generated from `#/components/schemas/Error400/errors`.
            public var errors: Components.Schemas.Error400.errorsPayload?
            /// - Remark: Generated from `#/components/schemas/Error400/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Error400/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error400/traceId`.
            public var traceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error400/type`.
            public var _type: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `Error400`.
            ///
            /// - Parameters:
            ///   - errors:
            ///   - status:
            ///   - title:
            ///   - traceId:
            ///   - _type:
            public init(
                errors: Components.Schemas.Error400.errorsPayload? = nil,
                status: Swift.Int? = nil,
                title: Swift.String? = nil,
                traceId: Swift.String? = nil,
                _type: Swift.String? = nil
            ) {
                self.errors = errors
                self.status = status
                self.title = title
                self.traceId = traceId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case errors
                case status
                case title
                case traceId
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccount`.
        public struct GLAccount: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/GLAccount/AccountName`.
            public var AccountName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GLAccount/AccountType`.
            public var AccountType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GLAccount/DisabledYN`.
            public var DisabledYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GLAccount/TypeGroup`.
            public var TypeGroup: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `GLAccount`.
            ///
            /// - Parameters:
            ///   - AccountName:
            ///   - AccountType:
            ///   - DisabledYN:
            ///   - TypeGroup:
            public init(
                AccountName: Swift.String? = nil,
                AccountType: Swift.String? = nil,
                DisabledYN: Swift.Bool? = nil,
                TypeGroup: Swift.String? = nil
            ) {
                self.AccountName = AccountName
                self.AccountType = AccountType
                self.DisabledYN = DisabledYN
                self.TypeGroup = TypeGroup
            }
            public enum CodingKeys: String, CodingKey {
                case AccountName
                case AccountType
                case DisabledYN
                case TypeGroup
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountDelete`.
        public struct GLAccountDelete: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/GLAccountDelete/rowsAffected`.
            public var rowsAffected: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GLAccountDelete/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `GLAccountDelete`.
            ///
            /// - Parameters:
            ///   - rowsAffected:
            ///   - status:
            public init(rowsAffected: Swift.Int? = nil, status: Swift.Bool? = nil) {
                self.rowsAffected = rowsAffected
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case rowsAffected
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountGroup`.
        @frozen public enum GLAccountGroup: String, Codable, Hashable, Sendable {
            case All = "All"
            case AccountsPayable = "AccountsPayable"
            case AccountsReceivable = "AccountsReceivable"
            case Asset = "Asset"
            case Bank = "Bank"
            case CreditCard = "CreditCard"
            case Equity = "Equity"
            case Expense = "Expense"
            case Income = "Income"
            case Inventory = "Inventory"
            case Liability = "Liability"
            case NotesPayable = "NotesPayable"
            case NotesReceivable = "NotesReceivable"
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountList`.
        public struct GLAccountList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/GLAccountList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/GLAccountList/data/records`.
                public var records: [Components.Schemas.GLAccountRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.GLAccountRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/GLAccountList/data`.
            public var data: Components.Schemas.GLAccountList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/GLAccountList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `GLAccountList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.GLAccountList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountRecord`.
        public struct GLAccountRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/GLAccountRecord/AccountName`.
            public var AccountName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GLAccountRecord/AccountNo`.
            public var AccountNo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GLAccountRecord/AccountType`.
            public var AccountType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GLAccountRecord/DisabledYN`.
            public var DisabledYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GLAccountRecord/TypeGroup`.
            public var TypeGroup: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `GLAccountRecord`.
            ///
            /// - Parameters:
            ///   - AccountName:
            ///   - AccountNo:
            ///   - AccountType:
            ///   - DisabledYN:
            ///   - TypeGroup:
            public init(
                AccountName: Swift.String? = nil,
                AccountNo: Swift.String? = nil,
                AccountType: Swift.String? = nil,
                DisabledYN: Swift.Bool? = nil,
                TypeGroup: Swift.String? = nil
            ) {
                self.AccountName = AccountName
                self.AccountNo = AccountNo
                self.AccountType = AccountType
                self.DisabledYN = DisabledYN
                self.TypeGroup = TypeGroup
            }
            public enum CodingKeys: String, CodingKey {
                case AccountName
                case AccountNo
                case AccountType
                case DisabledYN
                case TypeGroup
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountResponse`.
        public struct GLAccountResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/GLAccountResponse/rowsAffected`.
            public var rowsAffected: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GLAccountResponse/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `GLAccountResponse`.
            ///
            /// - Parameters:
            ///   - rowsAffected:
            ///   - status:
            public init(rowsAffected: Swift.Int? = nil, status: Swift.Bool? = nil) {
                self.rowsAffected = rowsAffected
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case rowsAffected
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/GLAccountType`.
        @frozen public enum GLAccountType: String, Codable, Hashable, Sendable {
            case All = "All"
            case AccountsPayable = "AccountsPayable"
            case AccountsReceivable = "AccountsReceivable"
            case Bank = "Bank"
            case CostofGoodSold = "CostofGoodSold"
            case CostofSales = "CostofSales"
            case CreditCard = "CreditCard"
            case CurrentAsset = "CurrentAsset"
            case CurrentLiability = "CurrentLiability"
            case Equity = "Equity"
            case Expense = "Expense"
            case FixedAsset = "FixedAsset"
            case Income = "Income"
            case Inventory = "Inventory"
            case LongTermLiability = "LongTermLiability"
            case NotesPayable = "NotesPayable"
            case NotesReceivable = "NotesReceivable"
            case OtherAsset = "OtherAsset"
            case OtherCurrentAsset = "OtherCurrentAsset"
            case OtherCurrentLiabilty = "OtherCurrentLiabilty"
            case OtherExpense = "OtherExpense"
            case OtherFixedAsset = "OtherFixedAsset"
            case OtherIncome = "OtherIncome"
            case OtherLiability = "OtherLiability"
            case OtherLongTermLiability = "OtherLongTermLiability"
            case LoanAccounts = "LoanAccounts"
        }
        /// - Remark: Generated from `#/components/schemas/ListType`.
        @frozen public enum ListType: String, Codable, Hashable, Sendable {
            case All = "All"
            case Customer = "Customer"
            case Vendor = "Vendor"
            case CustomerVendor = "CustomerVendor"
            case Employee = "Employee"
            case Salesman = "Salesman"
        }
        /// - Remark: Generated from `#/components/schemas/NotesPayable`.
        public struct NotesPayable: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesPayable/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord`.
                public struct mainRecordPayload: Codable, Hashable, Sendable, Identifiable {
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/CreditAccount`.
                    public var CreditAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/DebitAccount`.
                    public var DebitAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/EditDT`.
                    public var EditDT: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/EditUserName`.
                    public var EditUserName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/IDNo`.
                    public var IDNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/InputDT`.
                    public var InputDT: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/InputUserName`.
                    public var InputUserName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanAmount`.
                    public var LoanAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanBalance`.
                    public var LoanBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanCategory`.
                    public var LoanCategory: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanDesc`.
                    public var LoanDesc: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanInterestRate`.
                    public var LoanInterestRate: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanNo`.
                    public var LoanNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanNotes`.
                    public var LoanNotes: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LoanStartDate`.
                    public var LoanStartDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/LocCode`.
                    public var LocCode: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/PaymentAccount`.
                    public var PaymentAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/PaymentFrequency`.
                    public var PaymentFrequency: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/PrevPaymentDate`.
                    public var PrevPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/SchedPaymentAmount`.
                    public var SchedPaymentAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/SchedPaymentCount`.
                    public var SchedPaymentCount: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/TransEntityID`.
                    public var TransEntityID: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord/TransEntityName`.
                    public var TransEntityName: Swift.String?
                    public var id: UUID = UUID()
                    /// Creates a new `mainRecordPayload`.
                    ///
                    /// - Parameters:
                    ///   - CreditAccount:
                    ///   - DebitAccount:
                    ///   - EditDT:
                    ///   - EditUserName:
                    ///   - IDNo:
                    ///   - InputDT:
                    ///   - InputUserName:
                    ///   - LoanAmount:
                    ///   - LoanBalance:
                    ///   - LoanCategory:
                    ///   - LoanDesc:
                    ///   - LoanInterestRate:
                    ///   - LoanNo:
                    ///   - LoanNotes:
                    ///   - LoanStartDate:
                    ///   - LocCode:
                    ///   - PaymentAccount:
                    ///   - PaymentFrequency:
                    ///   - PrevPaymentDate:
                    ///   - SchedPaymentAmount:
                    ///   - SchedPaymentCount:
                    ///   - TransEntityID:
                    ///   - TransEntityName:
                    public init(
                        CreditAccount: Swift.String? = nil,
                        DebitAccount: Swift.String? = nil,
                        EditDT: Swift.String? = nil,
                        EditUserName: Swift.String? = nil,
                        IDNo: Swift.Int? = nil,
                        InputDT: Swift.String? = nil,
                        InputUserName: Swift.String? = nil,
                        LoanAmount: Swift.Double? = nil,
                        LoanBalance: Swift.Double? = nil,
                        LoanCategory: Swift.String? = nil,
                        LoanDesc: Swift.String? = nil,
                        LoanInterestRate: Swift.Double? = nil,
                        LoanNo: Swift.Int? = nil,
                        LoanNotes: Swift.String? = nil,
                        LoanStartDate: Swift.String? = nil,
                        LocCode: Swift.String? = nil,
                        PaymentAccount: Swift.String? = nil,
                        PaymentFrequency: Swift.String? = nil,
                        PrevPaymentDate: Swift.String? = nil,
                        SchedPaymentAmount: Swift.Double? = nil,
                        SchedPaymentCount: Swift.Int? = nil,
                        TransEntityID: Swift.Int? = nil,
                        TransEntityName: Swift.String? = nil
                    ) {
                        self.CreditAccount = CreditAccount
                        self.DebitAccount = DebitAccount
                        self.EditDT = EditDT
                        self.EditUserName = EditUserName
                        self.IDNo = IDNo
                        self.InputDT = InputDT
                        self.InputUserName = InputUserName
                        self.LoanAmount = LoanAmount
                        self.LoanBalance = LoanBalance
                        self.LoanCategory = LoanCategory
                        self.LoanDesc = LoanDesc
                        self.LoanInterestRate = LoanInterestRate
                        self.LoanNo = LoanNo
                        self.LoanNotes = LoanNotes
                        self.LoanStartDate = LoanStartDate
                        self.LocCode = LocCode
                        self.PaymentAccount = PaymentAccount
                        self.PaymentFrequency = PaymentFrequency
                        self.PrevPaymentDate = PrevPaymentDate
                        self.SchedPaymentAmount = SchedPaymentAmount
                        self.SchedPaymentCount = SchedPaymentCount
                        self.TransEntityID = TransEntityID
                        self.TransEntityName = TransEntityName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case CreditAccount
                        case DebitAccount
                        case EditDT
                        case EditUserName
                        case IDNo
                        case InputDT
                        case InputUserName
                        case LoanAmount
                        case LoanBalance
                        case LoanCategory
                        case LoanDesc
                        case LoanInterestRate
                        case LoanNo
                        case LoanNotes
                        case LoanStartDate
                        case LocCode
                        case PaymentAccount
                        case PaymentFrequency
                        case PrevPaymentDate
                        case SchedPaymentAmount
                        case SchedPaymentCount
                        case TransEntityID
                        case TransEntityName
                    }
                }
                /// - Remark: Generated from `#/components/schemas/NotesPayable/data/mainRecord`.
                public var mainRecord: Components.Schemas.NotesPayable.dataPayload.mainRecordPayload?
                /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload`.
                public struct subRecordsPayloadPayload: Codable, Hashable, Sendable, Identifiable {
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/ActualBalance`.
                    public var ActualBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/ActualInterestAmount`.
                    public var ActualInterestAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/ActualPaymentAmount`.
                    public var ActualPaymentAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/ActualPaymentDate`.
                    public var ActualPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/ActualPrincipalAmount`.
                    public var ActualPrincipalAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/IDNo`.
                    public var IDNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/LoanNo`.
                    public var LoanNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedBalance`.
                    public var SchedBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedInterestAmount`.
                    public var SchedInterestAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedPaymentAmount`.
                    public var SchedPaymentAmount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedPaymentDate`.
                    public var SchedPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedPeriodNo`.
                    public var SchedPeriodNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecordsPayload/SchedPrincipalAmount`.
                    public var SchedPrincipalAmount: Swift.Double?
                    public var id: UUID = UUID()
                    /// Creates a new `subRecordsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - ActualBalance:
                    ///   - ActualInterestAmount:
                    ///   - ActualPaymentAmount:
                    ///   - ActualPaymentDate:
                    ///   - ActualPrincipalAmount:
                    ///   - IDNo:
                    ///   - LoanNo:
                    ///   - SchedBalance:
                    ///   - SchedInterestAmount:
                    ///   - SchedPaymentAmount:
                    ///   - SchedPaymentDate:
                    ///   - SchedPeriodNo:
                    ///   - SchedPrincipalAmount:
                    public init(
                        ActualBalance: Swift.Double? = nil,
                        ActualInterestAmount: Swift.Double? = nil,
                        ActualPaymentAmount: Swift.Double? = nil,
                        ActualPaymentDate: Swift.String? = nil,
                        ActualPrincipalAmount: Swift.Double? = nil,
                        IDNo: Swift.Int? = nil,
                        LoanNo: Swift.Int? = nil,
                        SchedBalance: Swift.Double? = nil,
                        SchedInterestAmount: Swift.Double? = nil,
                        SchedPaymentAmount: Swift.String? = nil,
                        SchedPaymentDate: Swift.String? = nil,
                        SchedPeriodNo: Swift.Int? = nil,
                        SchedPrincipalAmount: Swift.Double? = nil
                    ) {
                        self.ActualBalance = ActualBalance
                        self.ActualInterestAmount = ActualInterestAmount
                        self.ActualPaymentAmount = ActualPaymentAmount
                        self.ActualPaymentDate = ActualPaymentDate
                        self.ActualPrincipalAmount = ActualPrincipalAmount
                        self.IDNo = IDNo
                        self.LoanNo = LoanNo
                        self.SchedBalance = SchedBalance
                        self.SchedInterestAmount = SchedInterestAmount
                        self.SchedPaymentAmount = SchedPaymentAmount
                        self.SchedPaymentDate = SchedPaymentDate
                        self.SchedPeriodNo = SchedPeriodNo
                        self.SchedPrincipalAmount = SchedPrincipalAmount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ActualBalance
                        case ActualInterestAmount
                        case ActualPaymentAmount
                        case ActualPaymentDate
                        case ActualPrincipalAmount
                        case IDNo
                        case LoanNo
                        case SchedBalance
                        case SchedInterestAmount
                        case SchedPaymentAmount
                        case SchedPaymentDate
                        case SchedPeriodNo
                        case SchedPrincipalAmount
                    }
                }
                /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecords`.
                public typealias subRecordsPayload = [Components.Schemas.NotesPayable.dataPayload
                    .subRecordsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/NotesPayable/data/subRecords`.
                public var subRecords: Components.Schemas.NotesPayable.dataPayload.subRecordsPayload?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - mainRecord:
                ///   - subRecords:
                public init(
                    mainRecord: Components.Schemas.NotesPayable.dataPayload.mainRecordPayload? = nil,
                    subRecords: Components.Schemas.NotesPayable.dataPayload.subRecordsPayload? = nil
                ) {
                    self.mainRecord = mainRecord
                    self.subRecords = subRecords
                }
                public enum CodingKeys: String, CodingKey {
                    case mainRecord
                    case subRecords
                }
            }
            /// - Remark: Generated from `#/components/schemas/NotesPayable/data`.
            public var data: Components.Schemas.NotesPayable.dataPayload?
            /// - Remark: Generated from `#/components/schemas/NotesPayable/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `NotesPayable`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.NotesPayable.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotesPayableList`.
        public struct NotesPayableList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesPayableList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/NotesPayableList/data/records`.
                public var records: [Components.Schemas.NotesPayableRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.NotesPayableRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/NotesPayableList/data`.
            public var data: Components.Schemas.NotesPayableList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/NotesPayableList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `NotesPayableList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.NotesPayableList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotesPayableRecord`.
        public struct NotesPayableRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/IDNo`.
            public var IDNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/LoanAmount`.
            public var LoanAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/LoanCategory`.
            public var LoanCategory: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/LoanInterestRate`.
            public var LoanInterestRate: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/LoanNo`.
            public var LoanNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/LoanStartDate`.
            public var LoanStartDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/PaymentFrequency`.
            public var PaymentFrequency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/PrevPaymentDate`.
            public var PrevPaymentDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/SchedPaymentAmount`.
            public var SchedPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/SchedPaymentCount`.
            public var SchedPaymentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesPayableRecord/TransEntityName`.
            public var TransEntityName: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `NotesPayableRecord`.
            ///
            /// - Parameters:
            ///   - IDNo:
            ///   - LoanAmount:
            ///   - LoanCategory:
            ///   - LoanInterestRate:
            ///   - LoanNo:
            ///   - LoanStartDate:
            ///   - PaymentFrequency:
            ///   - PrevPaymentDate:
            ///   - SchedPaymentAmount:
            ///   - SchedPaymentCount:
            ///   - TransEntityName:
            public init(
                IDNo: Swift.Int? = nil,
                LoanAmount: Swift.Double? = nil,
                LoanCategory: Swift.String? = nil,
                LoanInterestRate: Swift.Double? = nil,
                LoanNo: Swift.Int? = nil,
                LoanStartDate: Swift.String? = nil,
                PaymentFrequency: Swift.String? = nil,
                PrevPaymentDate: Swift.String? = nil,
                SchedPaymentAmount: Swift.Double? = nil,
                SchedPaymentCount: Swift.Int? = nil,
                TransEntityName: Swift.String? = nil
            ) {
                self.IDNo = IDNo
                self.LoanAmount = LoanAmount
                self.LoanCategory = LoanCategory
                self.LoanInterestRate = LoanInterestRate
                self.LoanNo = LoanNo
                self.LoanStartDate = LoanStartDate
                self.PaymentFrequency = PaymentFrequency
                self.PrevPaymentDate = PrevPaymentDate
                self.SchedPaymentAmount = SchedPaymentAmount
                self.SchedPaymentCount = SchedPaymentCount
                self.TransEntityName = TransEntityName
            }
            public enum CodingKeys: String, CodingKey {
                case IDNo
                case LoanAmount
                case LoanCategory
                case LoanInterestRate
                case LoanNo
                case LoanStartDate
                case PaymentFrequency
                case PrevPaymentDate
                case SchedPaymentAmount
                case SchedPaymentCount
                case TransEntityName
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotesReceivable`.
        public struct NotesReceivable: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesReceivable/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord`.
                public struct mainRecordPayload: Codable, Hashable, Sendable, Identifiable {
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/CreditAccount`.
                    public var CreditAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/DebitAccount`.
                    public var DebitAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/EditDT`.
                    public var EditDT: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/EditUserName`.
                    public var EditUserName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/IDNo`.
                    public var IDNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/InputDT`.
                    public var InputDT: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/InputUserName`.
                    public var InputUserName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanAmount`.
                    public var LoanAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanBalance`.
                    public var LoanBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanCategory`.
                    public var LoanCategory: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanDesc`.
                    public var LoanDesc: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanInterestRate`.
                    public var LoanInterestRate: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanNo`.
                    public var LoanNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanNotes`.
                    public var LoanNotes: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LoanStartDate`.
                    public var LoanStartDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/LocCode`.
                    public var LocCode: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/PaymentAccount`.
                    public var PaymentAccount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/PaymentFrequency`.
                    public var PaymentFrequency: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/PrevPaymentDate`.
                    public var PrevPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/SchedPaymentAmount`.
                    public var SchedPaymentAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/SchedPaymentCount`.
                    public var SchedPaymentCount: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/TransEntityID`.
                    public var TransEntityID: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord/TransEntityName`.
                    public var TransEntityName: Swift.String?
                    public var id: UUID = UUID()
                    /// Creates a new `mainRecordPayload`.
                    ///
                    /// - Parameters:
                    ///   - CreditAccount:
                    ///   - DebitAccount:
                    ///   - EditDT:
                    ///   - EditUserName:
                    ///   - IDNo:
                    ///   - InputDT:
                    ///   - InputUserName:
                    ///   - LoanAmount:
                    ///   - LoanBalance:
                    ///   - LoanCategory:
                    ///   - LoanDesc:
                    ///   - LoanInterestRate:
                    ///   - LoanNo:
                    ///   - LoanNotes:
                    ///   - LoanStartDate:
                    ///   - LocCode:
                    ///   - PaymentAccount:
                    ///   - PaymentFrequency:
                    ///   - PrevPaymentDate:
                    ///   - SchedPaymentAmount:
                    ///   - SchedPaymentCount:
                    ///   - TransEntityID:
                    ///   - TransEntityName:
                    public init(
                        CreditAccount: Swift.String? = nil,
                        DebitAccount: Swift.String? = nil,
                        EditDT: Swift.String? = nil,
                        EditUserName: Swift.String? = nil,
                        IDNo: Swift.Int? = nil,
                        InputDT: Swift.String? = nil,
                        InputUserName: Swift.String? = nil,
                        LoanAmount: Swift.Double? = nil,
                        LoanBalance: Swift.Double? = nil,
                        LoanCategory: Swift.String? = nil,
                        LoanDesc: Swift.String? = nil,
                        LoanInterestRate: Swift.Double? = nil,
                        LoanNo: Swift.Int? = nil,
                        LoanNotes: Swift.String? = nil,
                        LoanStartDate: Swift.String? = nil,
                        LocCode: Swift.String? = nil,
                        PaymentAccount: Swift.String? = nil,
                        PaymentFrequency: Swift.String? = nil,
                        PrevPaymentDate: Swift.String? = nil,
                        SchedPaymentAmount: Swift.Double? = nil,
                        SchedPaymentCount: Swift.Int? = nil,
                        TransEntityID: Swift.Int? = nil,
                        TransEntityName: Swift.String? = nil
                    ) {
                        self.CreditAccount = CreditAccount
                        self.DebitAccount = DebitAccount
                        self.EditDT = EditDT
                        self.EditUserName = EditUserName
                        self.IDNo = IDNo
                        self.InputDT = InputDT
                        self.InputUserName = InputUserName
                        self.LoanAmount = LoanAmount
                        self.LoanBalance = LoanBalance
                        self.LoanCategory = LoanCategory
                        self.LoanDesc = LoanDesc
                        self.LoanInterestRate = LoanInterestRate
                        self.LoanNo = LoanNo
                        self.LoanNotes = LoanNotes
                        self.LoanStartDate = LoanStartDate
                        self.LocCode = LocCode
                        self.PaymentAccount = PaymentAccount
                        self.PaymentFrequency = PaymentFrequency
                        self.PrevPaymentDate = PrevPaymentDate
                        self.SchedPaymentAmount = SchedPaymentAmount
                        self.SchedPaymentCount = SchedPaymentCount
                        self.TransEntityID = TransEntityID
                        self.TransEntityName = TransEntityName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case CreditAccount
                        case DebitAccount
                        case EditDT
                        case EditUserName
                        case IDNo
                        case InputDT
                        case InputUserName
                        case LoanAmount
                        case LoanBalance
                        case LoanCategory
                        case LoanDesc
                        case LoanInterestRate
                        case LoanNo
                        case LoanNotes
                        case LoanStartDate
                        case LocCode
                        case PaymentAccount
                        case PaymentFrequency
                        case PrevPaymentDate
                        case SchedPaymentAmount
                        case SchedPaymentCount
                        case TransEntityID
                        case TransEntityName
                    }
                }
                /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/mainRecord`.
                public var mainRecord: Components.Schemas.NotesReceivable.dataPayload.mainRecordPayload?
                /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload`.
                public struct subRecordsPayloadPayload: Codable, Hashable, Sendable, Identifiable {
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/ActualBalance`.
                    public var ActualBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/ActualInterestAmount`.
                    public var ActualInterestAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/ActualPaymentAmount`.
                    public var ActualPaymentAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/ActualPaymentDate`.
                    public var ActualPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/ActualPrincipalAmount`.
                    public var ActualPrincipalAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/IDNo`.
                    public var IDNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/LoanNo`.
                    public var LoanNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedBalance`.
                    public var SchedBalance: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedInterestAmount`.
                    public var SchedInterestAmount: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedPaymentAmount`.
                    public var SchedPaymentAmount: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedPaymentDate`.
                    public var SchedPaymentDate: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedPeriodNo`.
                    public var SchedPeriodNo: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecordsPayload/SchedPrincipalAmount`.
                    public var SchedPrincipalAmount: Swift.Double?
                    public var id: UUID = UUID()
                    /// Creates a new `subRecordsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - ActualBalance:
                    ///   - ActualInterestAmount:
                    ///   - ActualPaymentAmount:
                    ///   - ActualPaymentDate:
                    ///   - ActualPrincipalAmount:
                    ///   - IDNo:
                    ///   - LoanNo:
                    ///   - SchedBalance:
                    ///   - SchedInterestAmount:
                    ///   - SchedPaymentAmount:
                    ///   - SchedPaymentDate:
                    ///   - SchedPeriodNo:
                    ///   - SchedPrincipalAmount:
                    public init(
                        ActualBalance: Swift.Double? = nil,
                        ActualInterestAmount: Swift.Double? = nil,
                        ActualPaymentAmount: Swift.Double? = nil,
                        ActualPaymentDate: Swift.String? = nil,
                        ActualPrincipalAmount: Swift.Double? = nil,
                        IDNo: Swift.Int? = nil,
                        LoanNo: Swift.Int? = nil,
                        SchedBalance: Swift.Double? = nil,
                        SchedInterestAmount: Swift.Double? = nil,
                        SchedPaymentAmount: Swift.String? = nil,
                        SchedPaymentDate: Swift.String? = nil,
                        SchedPeriodNo: Swift.Int? = nil,
                        SchedPrincipalAmount: Swift.Double? = nil
                    ) {
                        self.ActualBalance = ActualBalance
                        self.ActualInterestAmount = ActualInterestAmount
                        self.ActualPaymentAmount = ActualPaymentAmount
                        self.ActualPaymentDate = ActualPaymentDate
                        self.ActualPrincipalAmount = ActualPrincipalAmount
                        self.IDNo = IDNo
                        self.LoanNo = LoanNo
                        self.SchedBalance = SchedBalance
                        self.SchedInterestAmount = SchedInterestAmount
                        self.SchedPaymentAmount = SchedPaymentAmount
                        self.SchedPaymentDate = SchedPaymentDate
                        self.SchedPeriodNo = SchedPeriodNo
                        self.SchedPrincipalAmount = SchedPrincipalAmount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ActualBalance
                        case ActualInterestAmount
                        case ActualPaymentAmount
                        case ActualPaymentDate
                        case ActualPrincipalAmount
                        case IDNo
                        case LoanNo
                        case SchedBalance
                        case SchedInterestAmount
                        case SchedPaymentAmount
                        case SchedPaymentDate
                        case SchedPeriodNo
                        case SchedPrincipalAmount
                    }
                }
                /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecords`.
                public typealias subRecordsPayload = [Components.Schemas.NotesReceivable.dataPayload
                    .subRecordsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/NotesReceivable/data/subRecords`.
                public var subRecords: Components.Schemas.NotesReceivable.dataPayload.subRecordsPayload?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - mainRecord:
                ///   - subRecords:
                public init(
                    mainRecord: Components.Schemas.NotesReceivable.dataPayload.mainRecordPayload? = nil,
                    subRecords: Components.Schemas.NotesReceivable.dataPayload.subRecordsPayload? = nil
                ) {
                    self.mainRecord = mainRecord
                    self.subRecords = subRecords
                }
                public enum CodingKeys: String, CodingKey {
                    case mainRecord
                    case subRecords
                }
            }
            /// - Remark: Generated from `#/components/schemas/NotesReceivable/data`.
            public var data: Components.Schemas.NotesReceivable.dataPayload?
            /// - Remark: Generated from `#/components/schemas/NotesReceivable/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `NotesReceivable`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.NotesReceivable.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotesReceivableList`.
        public struct NotesReceivableList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesReceivableList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/NotesReceivableList/data/records`.
                public var records: [Components.Schemas.NotesReceivableRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.NotesReceivableRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/NotesReceivableList/data`.
            public var data: Components.Schemas.NotesReceivableList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `NotesReceivableList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.NotesReceivableList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord`.
        public struct NotesReceivableRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/IDNo`.
            public var IDNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/LoanAmount`.
            public var LoanAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/LoanCategory`.
            public var LoanCategory: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/LoanInterestRate`.
            public var LoanInterestRate: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/LoanNo`.
            public var LoanNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/LoanStartDate`.
            public var LoanStartDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/PaymentFrequency`.
            public var PaymentFrequency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/PrevPaymentDate`.
            public var PrevPaymentDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/SchedPaymentAmount`.
            public var SchedPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/SchedPaymentCount`.
            public var SchedPaymentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NotesReceivableRecord/TransEntityName`.
            public var TransEntityName: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `NotesReceivableRecord`.
            ///
            /// - Parameters:
            ///   - IDNo:
            ///   - LoanAmount:
            ///   - LoanCategory:
            ///   - LoanInterestRate:
            ///   - LoanNo:
            ///   - LoanStartDate:
            ///   - PaymentFrequency:
            ///   - PrevPaymentDate:
            ///   - SchedPaymentAmount:
            ///   - SchedPaymentCount:
            ///   - TransEntityName:
            public init(
                IDNo: Swift.Int? = nil,
                LoanAmount: Swift.Double? = nil,
                LoanCategory: Swift.String? = nil,
                LoanInterestRate: Swift.Double? = nil,
                LoanNo: Swift.Int? = nil,
                LoanStartDate: Swift.String? = nil,
                PaymentFrequency: Swift.String? = nil,
                PrevPaymentDate: Swift.String? = nil,
                SchedPaymentAmount: Swift.Double? = nil,
                SchedPaymentCount: Swift.Int? = nil,
                TransEntityName: Swift.String? = nil
            ) {
                self.IDNo = IDNo
                self.LoanAmount = LoanAmount
                self.LoanCategory = LoanCategory
                self.LoanInterestRate = LoanInterestRate
                self.LoanNo = LoanNo
                self.LoanStartDate = LoanStartDate
                self.PaymentFrequency = PaymentFrequency
                self.PrevPaymentDate = PrevPaymentDate
                self.SchedPaymentAmount = SchedPaymentAmount
                self.SchedPaymentCount = SchedPaymentCount
                self.TransEntityName = TransEntityName
            }
            public enum CodingKeys: String, CodingKey {
                case IDNo
                case LoanAmount
                case LoanCategory
                case LoanInterestRate
                case LoanNo
                case LoanStartDate
                case PaymentFrequency
                case PrevPaymentDate
                case SchedPaymentAmount
                case SchedPaymentCount
                case TransEntityName
            }
        }
        /// - Remark: Generated from `#/components/schemas/RegisterType`.
        @frozen public enum RegisterType: String, Codable, Hashable, Sendable {
            case None = "None"
            case Bank = "Bank"
            case AccountsReceivable = "AccountsReceivable"
            case AccountsPayable = "AccountsPayable"
            case CreditCard = "CreditCard"
        }
        /// - Remark: Generated from `#/components/schemas/StatesList`.
        public struct StatesList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/StatesList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/StatesList/data/records`.
                public var records: [Components.Schemas.StatesRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.StatesRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/StatesList/data`.
            public var data: Components.Schemas.StatesList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/StatesList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `StatesList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.StatesList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/StatesRecord`.
        public struct StatesRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/StatesRecord/State`.
            public var State: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StatesRecord/StateName`.
            public var StateName: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `StatesRecord`.
            ///
            /// - Parameters:
            ///   - State:
            ///   - StateName:
            public init(State: Swift.String? = nil, StateName: Swift.String? = nil) {
                self.State = State
                self.StateName = StateName
            }
            public enum CodingKeys: String, CodingKey {
                case State
                case StateName
            }
        }
        /// - Remark: Generated from `#/components/schemas/Status`.
        @frozen public enum Status: String, Codable, Hashable, Sendable {
            case Enabled = "Enabled"
            case Disabled = "Disabled"
            case All = "All"
        }
        /// - Remark: Generated from `#/components/schemas/TransListType`.
        @frozen public enum TransListType: String, Codable, Hashable, Sendable {
            case None = "None"
            case Payments = "Payments"
            case Deposits = "Deposits"
            case Invoices = "Invoices"
            case Bills = "Bills"
            case JournalEntries = "JournalEntries"
        }
        /// - Remark: Generated from `#/components/schemas/TransTypeName`.
        @frozen public enum TransTypeName: String, Codable, Hashable, Sendable {
            case None = "None"
            case Payment = "Payment"
            case Deposit = "Deposit"
            case Invoice = "Invoice"
            case Bill = "Bill"
            case Journal = "Journal"
        }
        /// - Remark: Generated from `#/components/schemas/TransactionList`.
        public struct TransactionList: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionList/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/TransactionList/data/records`.
                public var records: [Components.Schemas.TransactionRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - records:
                public init(records: [Components.Schemas.TransactionRecord]? = nil) { self.records = records }
                public enum CodingKeys: String, CodingKey { case records }
            }
            /// - Remark: Generated from `#/components/schemas/TransactionList/data`.
            public var data: Components.Schemas.TransactionList.dataPayload?
            /// - Remark: Generated from `#/components/schemas/TransactionList/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `TransactionList`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.TransactionList.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionPatchResponse`.
        public struct TransactionPatchResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionPatchResponse/status`.
            public var status: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchResponse/rowsAffected`.
            public var rowsAffected: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchResponse/transNoGenerated`.
            public var transNoGenerated: Swift.Double?
            public var id: UUID = UUID()
            /// Creates a new `TransactionPatchResponse`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - rowsAffected:
            ///   - transNoGenerated:
            public init(
                status: Swift.Bool? = nil,
                rowsAffected: Swift.Double? = nil,
                transNoGenerated: Swift.Double? = nil
            ) {
                self.status = status
                self.rowsAffected = rowsAffected
                self.transNoGenerated = transNoGenerated
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case rowsAffected
                case transNoGenerated
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionPatchSubResponse`.
        public struct TransactionPatchSubResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSubResponse/status`.
            public var status: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSubResponse/rowsAffected`.
            public var rowsAffected: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSubResponse/currentBalance`.
            public var currentBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSubResponse/createdIDNo`.
            public var createdIDNo: Swift.Double?
            public var id: UUID = UUID()
            /// Creates a new `TransactionPatchSubResponse`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - rowsAffected:
            ///   - currentBalance:
            ///   - createdIDNo:
            public init(
                status: Swift.Bool? = nil,
                rowsAffected: Swift.Double? = nil,
                currentBalance: Swift.Double? = nil,
                createdIDNo: Swift.Double? = nil
            ) {
                self.status = status
                self.rowsAffected = rowsAffected
                self.currentBalance = currentBalance
                self.createdIDNo = createdIDNo
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case rowsAffected
                case currentBalance
                case createdIDNo
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionPatchMain`.
        public struct TransactionPatchMain: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/LocCode`.
            public var LocCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/Notes`.
            public var Notes: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransAccount`.
            public var TransAccount: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransCreditAmount`.
            public var TransCreditAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransDate`.
            public var TransDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransDebitAmount`.
            public var TransDebitAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransDocRef`.
            public var TransDocRef: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransEntityID`.
            public var TransEntityID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransEntityName`.
            public var TransEntityName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransPmtMethod`.
            public var TransPmtMethod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchMain/TransType`.
            public var TransType: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `TransactionPatchMain`.
            ///
            /// - Parameters:
            ///   - LocCode:
            ///   - Notes:
            ///   - TransAccount:
            ///   - TransCreditAmount:
            ///   - TransDate:
            ///   - TransDebitAmount:
            ///   - TransDocRef:
            ///   - TransEntityID:
            ///   - TransEntityName:
            ///   - TransPmtMethod:
            ///   - TransType:
            public init(
                LocCode: Swift.String? = nil,
                Notes: Swift.String? = nil,
                TransAccount: Swift.String? = nil,
                TransCreditAmount: Swift.Double? = nil,
                TransDate: Swift.String? = nil,
                TransDebitAmount: Swift.Double? = nil,
                TransDocRef: Swift.String? = nil,
                TransEntityID: Swift.Int? = nil,
                TransEntityName: Swift.String? = nil,
                TransPmtMethod: Swift.String? = nil,
                TransType: Swift.String? = nil
            ) {
                self.LocCode = LocCode
                self.Notes = Notes
                self.TransAccount = TransAccount
                self.TransCreditAmount = TransCreditAmount
                self.TransDate = TransDate
                self.TransDebitAmount = TransDebitAmount
                self.TransDocRef = TransDocRef
                self.TransEntityID = TransEntityID
                self.TransEntityName = TransEntityName
                self.TransPmtMethod = TransPmtMethod
                self.TransType = TransType
            }
            public enum CodingKeys: String, CodingKey {
                case LocCode
                case Notes
                case TransAccount
                case TransCreditAmount
                case TransDate
                case TransDebitAmount
                case TransDocRef
                case TransEntityID
                case TransEntityName
                case TransPmtMethod
                case TransType
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionPatchSub`.
        public struct TransactionPatchSub: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/LocCode`.
            public var LocCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/Notes`.
            public var Notes: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransAccount`.
            public var TransAccount: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransCreditAmount`.
            public var TransCreditAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransDate`.
            public var TransDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransDebitAmount`.
            public var TransDebitAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransDocRef`.
            public var TransDocRef: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransEntityID`.
            public var TransEntityID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransEntityName`.
            public var TransEntityName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransNo`.
            public var TransNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransPmtMethod`.
            public var TransPmtMethod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/TransType`.
            public var TransType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/InvTaxableYN`.
            public var InvTaxableYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/ChkClearedYN`.
            public var ChkClearedYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionPatchSub/ChkVoidYN`.
            public var ChkVoidYN: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `TransactionPatchSub`.
            ///
            /// - Parameters:
            ///   - LocCode:
            ///   - Notes:
            ///   - TransAccount:
            ///   - TransCreditAmount:
            ///   - TransDate:
            ///   - TransDebitAmount:
            ///   - TransDocRef:
            ///   - TransEntityID:
            ///   - TransEntityName:
            ///   - TransNo:
            ///   - TransPmtMethod:
            ///   - TransType:
            ///   - InvTaxableYN:
            ///   - ChkClearedYN:
            ///   - ChkVoidYN:
            public init(
                LocCode: Swift.String? = nil,
                Notes: Swift.String? = nil,
                TransAccount: Swift.String? = nil,
                TransCreditAmount: Swift.Double? = nil,
                TransDate: Swift.String? = nil,
                TransDebitAmount: Swift.Double? = nil,
                TransDocRef: Swift.String? = nil,
                TransEntityID: Swift.Int? = nil,
                TransEntityName: Swift.String? = nil,
                TransNo: Swift.Int? = nil,
                TransPmtMethod: Swift.String? = nil,
                TransType: Swift.String? = nil,
                InvTaxableYN: Swift.Bool? = nil,
                ChkClearedYN: Swift.Bool? = nil,
                ChkVoidYN: Swift.Bool? = nil
            ) {
                self.LocCode = LocCode
                self.Notes = Notes
                self.TransAccount = TransAccount
                self.TransCreditAmount = TransCreditAmount
                self.TransDate = TransDate
                self.TransDebitAmount = TransDebitAmount
                self.TransDocRef = TransDocRef
                self.TransEntityID = TransEntityID
                self.TransEntityName = TransEntityName
                self.TransNo = TransNo
                self.TransPmtMethod = TransPmtMethod
                self.TransType = TransType
                self.InvTaxableYN = InvTaxableYN
                self.ChkClearedYN = ChkClearedYN
                self.ChkVoidYN = ChkVoidYN
            }
            public enum CodingKeys: String, CodingKey {
                case LocCode
                case Notes
                case TransAccount
                case TransCreditAmount
                case TransDate
                case TransDebitAmount
                case TransDocRef
                case TransEntityID
                case TransEntityName
                case TransNo
                case TransPmtMethod
                case TransType
                case InvTaxableYN
                case ChkClearedYN
                case ChkVoidYN
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionRecord`.
        public struct TransactionRecord: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/ChkClearedYN`.
            public var ChkClearedYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/ChkVoidYN`.
            public var ChkVoidYN: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/Company_ID`.
            public var Company_ID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/RunningBalance`.
            public var RunningBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransTypeDesc`.
            public var TransTypeDesc: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/InputUserName`.
            public var InputUserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/InputDT`.
            public var InputDT: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/EditUserName`.
            public var EditUserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/EditDT`.
            public var EditDT: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/LocCode`.
            public var LocCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransEntityID`.
            public var TransEntityID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/IDNo`.
            public var IDNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransAccount`.
            public var TransAccount: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransCreditAmount`.
            public var TransCreditAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransDebitAmount`.
            public var TransDebitAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransDate`.
            public var TransDate: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransDocRef`.
            public var TransDocRef: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransEntityName`.
            public var TransEntityName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransNo`.
            public var TransNo: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransPmtMethod`.
            public var TransPmtMethod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/TransType`.
            public var TransType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TransactionRecord/Notes`.
            public var Notes: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `TransactionRecord`.
            ///
            /// - Parameters:
            ///   - ChkClearedYN:
            ///   - ChkVoidYN:
            ///   - Company_ID:
            ///   - RunningBalance:
            ///   - TransTypeDesc:
            ///   - InputUserName:
            ///   - InputDT:
            ///   - EditUserName:
            ///   - EditDT:
            ///   - LocCode:
            ///   - TransEntityID:
            ///   - IDNo:
            ///   - TransAccount:
            ///   - TransCreditAmount:
            ///   - TransDebitAmount:
            ///   - TransDate:
            ///   - TransDocRef:
            ///   - TransEntityName:
            ///   - TransNo:
            ///   - TransPmtMethod:
            ///   - TransType:
            ///   - Notes:
            public init(
                ChkClearedYN: Swift.Bool? = nil,
                ChkVoidYN: Swift.Bool? = nil,
                Company_ID: Swift.Int? = nil,
                RunningBalance: Swift.Double? = nil,
                TransTypeDesc: Swift.String? = nil,
                InputUserName: Swift.String? = nil,
                InputDT: Foundation.Date? = nil,
                EditUserName: Swift.String? = nil,
                EditDT: Foundation.Date? = nil,
                LocCode: Swift.String? = nil,
                TransEntityID: Swift.Int? = nil,
                IDNo: Swift.Int? = nil,
                TransAccount: Swift.String? = nil,
                TransCreditAmount: Swift.Double? = nil,
                TransDebitAmount: Swift.Double? = nil,
                TransDate: Foundation.Date? = nil,
                TransDocRef: Swift.String? = nil,
                TransEntityName: Swift.String? = nil,
                TransNo: Swift.Int? = nil,
                TransPmtMethod: Swift.String? = nil,
                TransType: Swift.String? = nil,
                Notes: Swift.String? = nil
            ) {
                self.ChkClearedYN = ChkClearedYN
                self.ChkVoidYN = ChkVoidYN
                self.Company_ID = Company_ID
                self.RunningBalance = RunningBalance
                self.TransTypeDesc = TransTypeDesc
                self.InputUserName = InputUserName
                self.InputDT = InputDT
                self.EditUserName = EditUserName
                self.EditDT = EditDT
                self.LocCode = LocCode
                self.TransEntityID = TransEntityID
                self.IDNo = IDNo
                self.TransAccount = TransAccount
                self.TransCreditAmount = TransCreditAmount
                self.TransDebitAmount = TransDebitAmount
                self.TransDate = TransDate
                self.TransDocRef = TransDocRef
                self.TransEntityName = TransEntityName
                self.TransNo = TransNo
                self.TransPmtMethod = TransPmtMethod
                self.TransType = TransType
                self.Notes = Notes
            }
            public enum CodingKeys: String, CodingKey {
                case ChkClearedYN
                case ChkVoidYN
                case Company_ID
                case RunningBalance
                case TransTypeDesc
                case InputUserName
                case InputDT
                case EditUserName
                case EditDT
                case LocCode
                case TransEntityID
                case IDNo
                case TransAccount
                case TransCreditAmount
                case TransDebitAmount
                case TransDate
                case TransDocRef
                case TransEntityName
                case TransNo
                case TransPmtMethod
                case TransType
                case Notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionMainRecords`.
        public struct TransactionMainRecords: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionMainRecords/mainRecord`.
            public var mainRecord: Components.Schemas.TransactionRecord
            /// - Remark: Generated from `#/components/schemas/TransactionMainRecords/subRecords`.
            public var subRecords: [Components.Schemas.TransactionRecord]
            public var id: UUID = UUID()
            /// Creates a new `TransactionMainRecords`.
            ///
            /// - Parameters:
            ///   - mainRecord:
            ///   - subRecords:
            public init(
                mainRecord: Components.Schemas.TransactionRecord,
                subRecords: [Components.Schemas.TransactionRecord]
            ) {
                self.mainRecord = mainRecord
                self.subRecords = subRecords
            }
            public enum CodingKeys: String, CodingKey {
                case mainRecord
                case subRecords
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionRecordResponse`.
        public struct TransactionRecordResponse: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionRecordResponse/status`.
            public var status: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TransactionRecordResponse/data`.
            public var data: Components.Schemas.TransactionMainRecords
            public var id: UUID = UUID()
            /// Creates a new `TransactionRecordResponse`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - data:
            public init(status: Swift.Bool? = nil, data: Components.Schemas.TransactionMainRecords) {
                self.status = status
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionRegister`.
        public struct TransactionRegister: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/TransactionRegister/data`.
            public struct dataPayload: Codable, Hashable, Sendable, Identifiable {
                /// - Remark: Generated from `#/components/schemas/TransactionRegister/data/currentBalance`.
                public var currentBalance: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/TransactionRegister/data/records`.
                public var records: [Components.Schemas.TransactionRecord]?
                public var id: UUID = UUID()
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - currentBalance:
                ///   - records:
                public init(currentBalance: Swift.Double? = nil, records: [Components.Schemas.TransactionRecord]? = nil)
                {
                    self.currentBalance = currentBalance
                    self.records = records
                }
                public enum CodingKeys: String, CodingKey {
                    case currentBalance
                    case records
                }
            }
            /// - Remark: Generated from `#/components/schemas/TransactionRegister/data`.
            public var data: Components.Schemas.TransactionRegister.dataPayload?
            /// - Remark: Generated from `#/components/schemas/TransactionRegister/status`.
            public var status: Swift.Bool?
            public var id: UUID = UUID()
            /// Creates a new `TransactionRegister`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(data: Components.Schemas.TransactionRegister.dataPayload? = nil, status: Swift.Bool? = nil) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/VAuth`.
        public struct VAuth: Codable, Hashable, Sendable, Identifiable {
            /// - Remark: Generated from `#/components/schemas/VAuth/ak`.
            public var ak: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VAuth/cid`.
            public var cid: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/VAuth/clientPlatform`.
            public var clientPlatform: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VAuth/user`.
            public var user: Swift.String?
            public var id: UUID = UUID()
            /// Creates a new `VAuth`.
            ///
            /// - Parameters:
            ///   - ak:
            ///   - cid:
            ///   - clientPlatform:
            ///   - user:
            public init(
                ak: Swift.String? = nil,
                cid: Swift.Int32? = nil,
                clientPlatform: Swift.String? = nil,
                user: Swift.String? = nil
            ) {
                self.ak = ak
                self.cid = cid
                self.clientPlatform = clientPlatform
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case ak
                case cid
                case clientPlatform
                case user
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ak = try container.decodeIfPresent(Swift.String.self, forKey: .ak)
                cid = try container.decodeIfPresent(Swift.Int32.self, forKey: .cid)
                clientPlatform = try container.decodeIfPresent(Swift.String.self, forKey: .clientPlatform)
                user = try container.decodeIfPresent(Swift.String.self, forKey: .user)
                try decoder.ensureNoAdditionalProperties(knownKeys: ["ak", "cid", "clientPlatform", "user"])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Entity`.
    /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)`.
    public enum EntityEntityGet {
        public static let id: String = "EntityEntityGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Entity/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GET/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo:
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.EntityEntityGet.Input.Query
            /// - Remark: Generated from `#/paths/Entity/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.EntityEntityGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EntityEntityGet.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.EntityEntityGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.EntityEntityGet.Input.Query,
                headers: Operations.EntityEntityGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Entity)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EntityEntityGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.EntityEntityGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.EntityEntityGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/get(EntityEntityGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.EntityEntityGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Create or Update a single record
    ///
    /// - Remark: HTTP `PATCH /Entity`.
    /// - Remark: Generated from `#/paths//Entity/patch(EntityEntityPatch)`.
    public enum EntityEntityPatch {
        public static let id: String = "EntityEntityPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Entity/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// Send a 0 to create a new record
                ///
                /// - Remark: Generated from `#/paths/Entity/PATCH/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo: Send a 0 to create a new record
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.EntityEntityPatch.Input.Query
            /// - Remark: Generated from `#/paths/Entity/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.EntityEntityPatch.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.EntityEntityPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.EntityEntityPatch.Input.Headers
            /// - Remark: Generated from `#/paths/Entity/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.EntityRecord)
                /// - Remark: Generated from `#/paths/Entity/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.EntityEntityPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.EntityEntityPatch.Input.Query,
                headers: Operations.EntityEntityPatch.Input.Headers = .init(),
                body: Operations.EntityEntityPatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommonResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityPatch.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityPatch.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Entity/patch(EntityEntityPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EntityEntityPatch.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /Entity`.
    /// - Remark: Generated from `#/paths//Entity/delete(EntityEntityDelete)`.
    public enum EntityEntityDelete {
        public static let id: String = "EntityEntityDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Entity/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/DELETE/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo:
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.EntityEntityDelete.Input.Query
            /// - Remark: Generated from `#/paths/Entity/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.EntityEntityDelete.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.EntityEntityDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.EntityEntityDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.EntityEntityDelete.Input.Query,
                headers: Operations.EntityEntityDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommonResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityDelete.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityDelete.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Entity/delete(EntityEntityDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EntityEntityDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.EntityEntityDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityEntityDelete.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/delete(EntityEntityDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.EntityEntityDelete.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a List or DropDown
    ///
    /// - Remark: HTTP `GET /Entity/GetList`.
    /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)`.
    public enum EntityGetlistGet {
        public static let id: String = "EntityGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Entity/GetList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/query/ListType`.
                public var ListType: Components.Schemas.ListType
                /// Filter Enabled/Disabled
                ///
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/query/Status`.
                public var Status: Components.Schemas.Status?
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ListType:
                ///   - Status: Filter Enabled/Disabled
                public init(ListType: Components.Schemas.ListType, Status: Components.Schemas.Status? = nil) {
                    self.ListType = ListType
                    self.Status = Status
                }
            }
            public var query: Operations.EntityGetlistGet.Input.Query
            /// - Remark: Generated from `#/paths/Entity/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.EntityGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.EntityGetlistGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.EntityGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.EntityGetlistGet.Input.Query,
                headers: Operations.EntityGetlistGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EntityList)
                }
                /// Received HTTP response body
                public var body: Operations.EntityGetlistGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityGetlistGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EntityGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.Error400)
                }
                /// Received HTTP response body
                public var body: Operations.EntityGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.EntityGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.Error400)
                }
                /// Received HTTP response body
                public var body: Operations.EntityGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityGetlistGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.EntityGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Entity/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.Error400)
                }
                /// Received HTTP response body
                public var body: Operations.EntityGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EntityGetlistGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Entity/GetList/get(EntityGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.EntityGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)`.
    public enum GLAccountGlaccountGet {
        public static let id: String = "GLAccountGlaccountGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GLAccount/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GET/query/AccountNo`.
                public var AccountNo: Swift.String
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - AccountNo:
                public init(AccountNo: Swift.String) { self.AccountNo = AccountNo }
            }
            public var query: Operations.GLAccountGlaccountGet.Input.Query
            /// - Remark: Generated from `#/paths/GLAccount/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.GLAccountGlaccountGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.GLAccountGlaccountGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.GLAccountGlaccountGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GLAccountGlaccountGet.Input.Query,
                headers: Operations.GLAccountGlaccountGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GLAccount)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GLAccountGlaccountGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GLAccountGlaccountGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.GLAccountGlaccountGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/get(GLAccountGlaccountGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GLAccountGlaccountGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Create a single record
    ///
    /// - Remark: HTTP `POST /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)`.
    public enum GLAccountGlaccountPost {
        public static let id: String = "GLAccountGlaccountPost"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GLAccount/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/query/AccountNo`.
                public var AccountNo: Swift.String
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - AccountNo:
                public init(AccountNo: Swift.String) { self.AccountNo = AccountNo }
            }
            public var query: Operations.GLAccountGlaccountPost.Input.Query
            /// - Remark: Generated from `#/paths/GLAccount/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.GLAccountGlaccountPost.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.GLAccountGlaccountPost.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.GLAccountGlaccountPost.Input.Headers
            /// - Remark: Generated from `#/paths/GLAccount/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GLAccount)
            }
            public var body: Operations.GLAccountGlaccountPost.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.GLAccountGlaccountPost.Input.Query,
                headers: Operations.GLAccountGlaccountPost.Input.Headers = .init(),
                body: Operations.GLAccountGlaccountPost.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.GLAccountResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPost.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPost.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GLAccountGlaccountPost.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPost.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPost.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GLAccountGlaccountPost.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPost.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPost.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.GLAccountGlaccountPost.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPost.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPost.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/post(GLAccountGlaccountPost)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GLAccountGlaccountPost.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)`.
    public enum GLAccountGlaccountPatch {
        public static let id: String = "GLAccountGlaccountPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GLAccount/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/query/AccountNo`.
                public var AccountNo: Swift.String
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - AccountNo:
                public init(AccountNo: Swift.String) { self.AccountNo = AccountNo }
            }
            public var query: Operations.GLAccountGlaccountPatch.Input.Query
            /// - Remark: Generated from `#/paths/GLAccount/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.GLAccountGlaccountPatch.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.GLAccountGlaccountPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.GLAccountGlaccountPatch.Input.Headers
            /// - Remark: Generated from `#/paths/GLAccount/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.GLAccount)
            }
            public var body: Operations.GLAccountGlaccountPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.GLAccountGlaccountPatch.Input.Query,
                headers: Operations.GLAccountGlaccountPatch.Input.Headers = .init(),
                body: Operations.GLAccountGlaccountPatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.GLAccountResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPatch.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPatch.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GLAccountGlaccountPatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPatch.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GLAccountGlaccountPatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.GLAccountGlaccountPatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountPatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountPatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/patch(GLAccountGlaccountPatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GLAccountGlaccountPatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /GLAccount`.
    /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)`.
    public enum GLAccountGlaccountDelete {
        public static let id: String = "GLAccountGlaccountDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GLAccount/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/DELETE/query/AccountNo`.
                public var AccountNo: Swift.String
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - AccountNo:
                public init(AccountNo: Swift.String) { self.AccountNo = AccountNo }
            }
            public var query: Operations.GLAccountGlaccountDelete.Input.Query
            /// - Remark: Generated from `#/paths/GLAccount/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.GLAccountGlaccountDelete.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.GLAccountGlaccountDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.GLAccountGlaccountDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GLAccountGlaccountDelete.Input.Query,
                headers: Operations.GLAccountGlaccountDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.GLAccountDelete)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountDelete.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountDelete.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GLAccountGlaccountDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountDelete.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GLAccountGlaccountDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.GLAccountGlaccountDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGlaccountDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGlaccountDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/delete(GLAccountGlaccountDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GLAccountGlaccountDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a List or DropDown
    ///
    /// - Remark: HTTP `GET /GLAccount/GetList`.
    /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)`.
    public enum GLAccountGetlistGet {
        public static let id: String = "GLAccountGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by GL Account Type
                ///
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/query/GLAccountType`.
                public var GLAccountType: Components.Schemas.GLAccountType?
                /// Filter by GL Account Group
                ///
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/query/GLAccountGroup`.
                public var GLAccountGroup: Components.Schemas.GLAccountGroup?
                /// Filter Enabled/Disabled
                ///
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/query/Status`.
                public var Status: Components.Schemas.Status?
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - GLAccountType: Filter by GL Account Type
                ///   - GLAccountGroup: Filter by GL Account Group
                ///   - Status: Filter Enabled/Disabled
                public init(
                    GLAccountType: Components.Schemas.GLAccountType? = nil,
                    GLAccountGroup: Components.Schemas.GLAccountGroup? = nil,
                    Status: Components.Schemas.Status? = nil
                ) {
                    self.GLAccountType = GLAccountType
                    self.GLAccountGroup = GLAccountGroup
                    self.Status = Status
                }
            }
            public var query: Operations.GLAccountGetlistGet.Input.Query
            /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.GLAccountGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.GLAccountGetlistGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.GLAccountGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GLAccountGetlistGet.Input.Query = .init(),
                headers: Operations.GLAccountGetlistGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GLAccountList)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGetlistGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGetlistGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GLAccountGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GLAccountGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGetlistGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.GLAccountGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GLAccount/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.GLAccountGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GLAccountGetlistGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//GLAccount/GetList/get(GLAccountGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GLAccountGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve the static system Account Types
    ///
    /// - Remark: HTTP `GET /Misc/GetAccountTypes`.
    /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)`.
    public enum MiscGetaccounttypesGet {
        public static let id: String = "MiscGetaccounttypesGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by GL Account Group
                ///
                /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/query/GLAccountGroup`.
                public var GLAccountGroup: Components.Schemas.GLAccountGroup?
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - GLAccountGroup: Filter by GL Account Group
                public init(GLAccountGroup: Components.Schemas.GLAccountGroup? = nil) {
                    self.GLAccountGroup = GLAccountGroup
                }
            }
            public var query: Operations.MiscGetaccounttypesGet.Input.Query
            /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.MiscGetaccounttypesGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.MiscGetaccounttypesGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.MiscGetaccounttypesGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.MiscGetaccounttypesGet.Input.Query = .init(),
                headers: Operations.MiscGetaccounttypesGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountTypesList)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetaccounttypesGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetaccounttypesGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.MiscGetaccounttypesGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetaccounttypesGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetaccounttypesGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.MiscGetaccounttypesGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetaccounttypesGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetaccounttypesGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.MiscGetaccounttypesGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetAccountTypes/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetaccounttypesGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetaccounttypesGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetAccountTypes/get(MiscGetaccounttypesGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.MiscGetaccounttypesGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a list of US states
    ///
    /// - Remark: HTTP `GET /Misc/GetStates`.
    /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)`.
    public enum MiscGetstatesGet {
        public static let id: String = "MiscGetstatesGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Misc/GetStates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.MiscGetstatesGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.MiscGetstatesGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.MiscGetstatesGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.MiscGetstatesGet.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.StatesList)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetstatesGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetstatesGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.MiscGetstatesGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetstatesGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetstatesGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.MiscGetstatesGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetstatesGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetstatesGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.MiscGetstatesGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Misc/GetStates/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.MiscGetstatesGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MiscGetstatesGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Misc/GetStates/get(MiscGetstatesGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.MiscGetstatesGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a single Main note payable record, as well as a SubRecords array that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /NotesPayable`.
    /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)`.
    public enum NotesPayableNotespayableGet {
        public static let id: String = "NotesPayableNotespayableGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GET/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesPayableNotespayableGet.Input.Query
            /// - Remark: Generated from `#/paths/NotesPayable/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableNotespayableGet.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableNotespayableGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayableNotespayableGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesPayableNotespayableGet.Input.Query,
                headers: Operations.NotesPayableNotespayableGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NotesPayable)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableNotespayableGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableNotespayableGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayableNotespayableGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableNotespayableGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableNotespayableGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayableNotespayableGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableNotespayableGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableNotespayableGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayableNotespayableGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableNotespayableGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableNotespayableGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/get(NotesPayableNotespayableGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayableNotespayableGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes a Main Note record as well as all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesPayable/DeleteMainNote`.
    /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)`.
    public enum NotesPayableDeletemainnoteDelete {
        public static let id: String = "NotesPayableDeletemainnoteDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesPayableDeletemainnoteDelete.Input.Query
            /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableDeletemainnoteDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableDeletemainnoteDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayableDeletemainnoteDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesPayableDeletemainnoteDelete.Input.Query,
                headers: Operations.NotesPayableDeletemainnoteDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayableDeletemainnoteDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletemainnoteDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletemainnoteDelete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayableDeletemainnoteDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletemainnoteDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletemainnoteDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayableDeletemainnoteDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteMainNote/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletemainnoteDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletemainnoteDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteMainNote/delete(NotesPayableDeletemainnoteDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayableDeletemainnoteDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesPayable/DeleteSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)`.
    public enum NotesPayableDeletesubscheduleDelete {
        public static let id: String = "NotesPayableDeletesubscheduleDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesPayableDeletesubscheduleDelete.Input.Query
            /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableDeletesubscheduleDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableDeletesubscheduleDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayableDeletesubscheduleDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesPayableDeletesubscheduleDelete.Input.Query,
                headers: Operations.NotesPayableDeletesubscheduleDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayableDeletesubscheduleDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletesubscheduleDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletesubscheduleDelete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayableDeletesubscheduleDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletesubscheduleDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletesubscheduleDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayableDeletesubscheduleDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/DeleteSubSchedule/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableDeletesubscheduleDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableDeletesubscheduleDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/DeleteSubSchedule/delete(NotesPayableDeletesubscheduleDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayableDeletesubscheduleDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a list of records
    ///
    /// - Remark: HTTP `GET /NotesPayable/GetList`.
    /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)`.
    public enum NotesPayableGetlistGet {
        public static let id: String = "NotesPayableGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.NotesPayableGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayableGetlistGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayableGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.NotesPayableGetlistGet.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NotesPayableList)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableGetlistGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableGetlistGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayableGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayableGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableGetlistGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayableGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayableGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayableGetlistGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/GetList/get(NotesPayableGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayableGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Create or Update a single Main note record (Generates a LoanNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /NotesPayable/PatchMainNote`.
    /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)`.
    public enum NotesPayablePatchmainnotePatch {
        public static let id: String = "NotesPayablePatchmainnotePatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// Send a 0 to create a new record
                ///
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo: Send a 0 to create a new record
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesPayablePatchmainnotePatch.Input.Query
            /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayablePatchmainnotePatch.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayablePatchmainnotePatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayablePatchmainnotePatch.Input.Headers
            /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/requestBody/content/application\/json`.
                case json(Operations.NotesPayablePatchmainnotePatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.NotesPayablePatchmainnotePatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.NotesPayablePatchmainnotePatch.Input.Query,
                headers: Operations.NotesPayablePatchmainnotePatch.Input.Headers = .init(),
                body: Operations.NotesPayablePatchmainnotePatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayablePatchmainnotePatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchmainnotePatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchmainnotePatch.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayablePatchmainnotePatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchmainnotePatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchmainnotePatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayablePatchmainnotePatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchMainNote/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchmainnotePatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchmainnotePatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchMainNote/patch(NotesPayablePatchmainnotePatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayablePatchmainnotePatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Creates Sub schedule records (Bulk insert of multiple records)
    ///
    /// - Remark: HTTP `PATCH /NotesPayable/PatchSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)`.
    public enum NotesPayablePatchsubschedulePatch {
        public static let id: String = "NotesPayablePatchsubschedulePatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesPayablePatchsubschedulePatch.Input.Query
            /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayablePatchsubschedulePatch.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesPayablePatchsubschedulePatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesPayablePatchsubschedulePatch.Input.Headers
            /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/requestBody/jsonPayload`.
                public struct jsonPayloadPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/requestBody/json`.
                public typealias jsonPayload = [Operations.NotesPayablePatchsubschedulePatch.Input.Body
                    .jsonPayloadPayload]
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/requestBody/content/application\/json`.
                case json(Operations.NotesPayablePatchsubschedulePatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.NotesPayablePatchsubschedulePatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.NotesPayablePatchsubschedulePatch.Input.Query,
                headers: Operations.NotesPayablePatchsubschedulePatch.Input.Headers = .init(),
                body: Operations.NotesPayablePatchsubschedulePatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesPayablePatchsubschedulePatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchsubschedulePatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchsubschedulePatch.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesPayablePatchsubschedulePatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchsubschedulePatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchsubschedulePatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesPayablePatchsubschedulePatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesPayable/PatchSubSchedule/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesPayablePatchsubschedulePatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesPayablePatchsubschedulePatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesPayable/PatchSubSchedule/patch(NotesPayablePatchsubschedulePatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesPayablePatchsubschedulePatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a single Main note receivable record, as well as a SubRecords array that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /NotesReceivable`.
    /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)`.
    public enum NotesReceivableNotesreceivableGet {
        public static let id: String = "NotesReceivableNotesreceivableGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GET/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesReceivableNotesreceivableGet.Input.Query
            /// - Remark: Generated from `#/paths/NotesReceivable/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableNotesreceivableGet.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableNotesreceivableGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivableNotesreceivableGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesReceivableNotesreceivableGet.Input.Query,
                headers: Operations.NotesReceivableNotesreceivableGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NotesReceivable)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableNotesreceivableGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableNotesreceivableGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivableNotesreceivableGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableNotesreceivableGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableNotesreceivableGet.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivableNotesreceivableGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableNotesreceivableGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableNotesreceivableGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivableNotesreceivableGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableNotesreceivableGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableNotesreceivableGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/get(NotesReceivableNotesreceivableGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivableNotesreceivableGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes a Main Note record as well as all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesReceivable/DeleteMainNote`.
    /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)`.
    public enum NotesReceivableDeletemainnoteDelete {
        public static let id: String = "NotesReceivableDeletemainnoteDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesReceivableDeletemainnoteDelete.Input.Query
            /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableDeletemainnoteDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableDeletemainnoteDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivableDeletemainnoteDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesReceivableDeletemainnoteDelete.Input.Query,
                headers: Operations.NotesReceivableDeletemainnoteDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivableDeletemainnoteDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletemainnoteDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletemainnoteDelete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivableDeletemainnoteDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletemainnoteDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletemainnoteDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivableDeletemainnoteDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteMainNote/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletemainnoteDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletemainnoteDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteMainNote/delete(NotesReceivableDeletemainnoteDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivableDeletemainnoteDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes all Sub Schedule records
    ///
    /// - Remark: HTTP `DELETE /NotesReceivable/DeleteSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)`.
    public enum NotesReceivableDeletesubscheduleDelete {
        public static let id: String = "NotesReceivableDeletesubscheduleDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesReceivableDeletesubscheduleDelete.Input.Query
            /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableDeletesubscheduleDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableDeletesubscheduleDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivableDeletesubscheduleDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.NotesReceivableDeletesubscheduleDelete.Input.Query,
                headers: Operations.NotesReceivableDeletesubscheduleDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivableDeletesubscheduleDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletesubscheduleDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletesubscheduleDelete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivableDeletesubscheduleDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletesubscheduleDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletesubscheduleDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivableDeletesubscheduleDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/DeleteSubSchedule/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableDeletesubscheduleDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableDeletesubscheduleDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/DeleteSubSchedule/delete(NotesReceivableDeletesubscheduleDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivableDeletesubscheduleDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a list of records
    ///
    /// - Remark: HTTP `GET /NotesReceivable/GetList`.
    /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)`.
    public enum NotesReceivableGetlistGet {
        public static let id: String = "NotesReceivableGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.NotesReceivableGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivableGetlistGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivableGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.NotesReceivableGetlistGet.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NotesReceivableList)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableGetlistGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableGetlistGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivableGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivableGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableGetlistGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivableGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivableGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivableGetlistGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/GetList/get(NotesReceivableGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivableGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Create or Update a single Main note record (Generates a LoanNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /NotesReceivable/PatchMainNote`.
    /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)`.
    public enum NotesReceivablePatchmainnotePatch {
        public static let id: String = "NotesReceivablePatchmainnotePatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// Send a 0 to create a new record
                ///
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo: Send a 0 to create a new record
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesReceivablePatchmainnotePatch.Input.Query
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivablePatchmainnotePatch.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivablePatchmainnotePatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivablePatchmainnotePatch.Input.Headers
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/requestBody/content/application\/json`.
                case json(Operations.NotesReceivablePatchmainnotePatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.NotesReceivablePatchmainnotePatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.NotesReceivablePatchmainnotePatch.Input.Query,
                headers: Operations.NotesReceivablePatchmainnotePatch.Input.Headers = .init(),
                body: Operations.NotesReceivablePatchmainnotePatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivablePatchmainnotePatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchmainnotePatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchmainnotePatch.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivablePatchmainnotePatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchmainnotePatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchmainnotePatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivablePatchmainnotePatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchMainNote/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchmainnotePatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchmainnotePatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchMainNote/patch(NotesReceivablePatchmainnotePatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivablePatchmainnotePatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Creates Sub schedule records (Bulk insert of multiple records)
    ///
    /// - Remark: HTTP `PATCH /NotesReceivable/PatchSubSchedule`.
    /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)`.
    public enum NotesReceivablePatchsubschedulePatch {
        public static let id: String = "NotesReceivablePatchsubschedulePatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/query/LoanNo`.
                public var LoanNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - LoanNo:
                public init(LoanNo: Swift.Int) { self.LoanNo = LoanNo }
            }
            public var query: Operations.NotesReceivablePatchsubschedulePatch.Input.Query
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivablePatchsubschedulePatch.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.NotesReceivablePatchsubschedulePatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.NotesReceivablePatchsubschedulePatch.Input.Headers
            /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/requestBody/jsonPayload`.
                public struct jsonPayloadPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/requestBody/json`.
                public typealias jsonPayload = [Operations.NotesReceivablePatchsubschedulePatch.Input.Body
                    .jsonPayloadPayload]
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/requestBody/content/application\/json`.
                case json(Operations.NotesReceivablePatchsubschedulePatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.NotesReceivablePatchsubschedulePatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.NotesReceivablePatchsubschedulePatch.Input.Query,
                headers: Operations.NotesReceivablePatchsubschedulePatch.Input.Headers = .init(),
                body: Operations.NotesReceivablePatchsubschedulePatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NotesReceivablePatchsubschedulePatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchsubschedulePatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchsubschedulePatch.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NotesReceivablePatchsubschedulePatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchsubschedulePatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchsubschedulePatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.NotesReceivablePatchsubschedulePatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/NotesReceivable/PatchSubSchedule/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.NotesReceivablePatchsubschedulePatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.NotesReceivablePatchsubschedulePatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//NotesReceivable/PatchSubSchedule/patch(NotesReceivablePatchsubschedulePatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NotesReceivablePatchsubschedulePatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Setup/AccountingDefaults`.
    /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)`.
    public enum SetupAccountingdefaultsGet {
        public static let id: String = "SetupAccountingdefaultsGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupAccountingdefaultsGet.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupAccountingdefaultsGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupAccountingdefaultsGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.SetupAccountingdefaultsGet.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupAccountingdefaultsGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupAccountingdefaultsGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupAccountingdefaultsGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/get(SetupAccountingdefaultsGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupAccountingdefaultsGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /Setup/AccountingDefaults`.
    /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)`.
    public enum SetupAccountingdefaultsPatch {
        public static let id: String = "SetupAccountingdefaultsPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupAccountingdefaultsPatch.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupAccountingdefaultsPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupAccountingdefaultsPatch.Input.Headers
            /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/requestBody/content/application\/json`.
                case json(Operations.SetupAccountingdefaultsPatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.SetupAccountingdefaultsPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SetupAccountingdefaultsPatch.Input.Headers = .init(),
                body: Operations.SetupAccountingdefaultsPatch.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupAccountingdefaultsPatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsPatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsPatch.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupAccountingdefaultsPatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsPatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsPatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupAccountingdefaultsPatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/AccountingDefaults/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupAccountingdefaultsPatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupAccountingdefaultsPatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/AccountingDefaults/patch(SetupAccountingdefaultsPatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupAccountingdefaultsPatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a Single Record
    ///
    /// - Remark: HTTP `GET /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)`.
    public enum SetupTermscodesGet {
        public static let id: String = "SetupTermscodesGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo:
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.SetupTermscodesGet.Input.Query
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.SetupTermscodesGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupTermscodesGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupTermscodesGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.SetupTermscodesGet.Input.Query,
                headers: Operations.SetupTermscodesGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupTermscodesGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupTermscodesGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupTermscodesGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/get(SetupTermscodesGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupTermscodesGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Update a single record
    ///
    /// - Remark: HTTP `PATCH /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)`.
    public enum SetupTermscodesPatch {
        public static let id: String = "SetupTermscodesPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo:
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.SetupTermscodesPatch.Input.Query
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.SetupTermscodesPatch.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupTermscodesPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupTermscodesPatch.Input.Headers
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable, Identifiable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    public var id: UUID = UUID()
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/requestBody/content/application\/json`.
                case json(Operations.SetupTermscodesPatch.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/requestBody/content/text\/json`.
                case text_json(Swift.String)
            }
            public var body: Operations.SetupTermscodesPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.SetupTermscodesPatch.Input.Query,
                headers: Operations.SetupTermscodesPatch.Input.Headers = .init(),
                body: Operations.SetupTermscodesPatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupTermscodesPatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesPatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesPatch.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupTermscodesPatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesPatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesPatch.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupTermscodesPatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesPatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesPatch.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/patch(SetupTermscodesPatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupTermscodesPatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Delete a single record
    ///
    /// - Remark: HTTP `DELETE /Setup/TermsCodes`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)`.
    public enum SetupTermscodesDelete {
        public static let id: String = "SetupTermscodesDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IDNo:
                public init(IDNo: Swift.Int) { self.IDNo = IDNo }
            }
            public var query: Operations.SetupTermscodesDelete.Input.Query
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.SetupTermscodesDelete.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.SetupTermscodesDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupTermscodesDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.SetupTermscodesDelete.Input.Query,
                headers: Operations.SetupTermscodesDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupTermscodesDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesDelete.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupTermscodesDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesDelete.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupTermscodesDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupTermscodesDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupTermscodesDelete.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/delete(SetupTermscodesDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupTermscodesDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a list or dropdown
    ///
    /// - Remark: HTTP `GET /Setup/TermsCodes/GetList`.
    /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)`.
    public enum SetupGetlistGet {
        public static let id: String = "SetupGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.SetupGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SetupGetlistGet.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.SetupGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.SetupGetlistGet.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SetupGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SetupGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupGetlistGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.SetupGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Setup/TermsCodes/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.SetupGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SetupGetlistGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Setup/TermsCodes/GetList/get(SetupGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SetupGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieves the Main transaction record, as well as a SubGrid item that contains all of the Sub Records
    ///
    /// - Remark: HTTP `GET /Transaction`.
    /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)`.
    public enum TransactionTransactionGet {
        public static let id: String = "TransactionTransactionGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GET/query/TransTypeName`.
                public var TransTypeName: Components.Schemas.TransTypeName
                /// - Remark: Generated from `#/paths/Transaction/GET/query/TransNo`.
                public var TransNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransTypeName:
                ///   - TransNo:
                public init(TransTypeName: Components.Schemas.TransTypeName, TransNo: Swift.Int) {
                    self.TransTypeName = TransTypeName
                    self.TransNo = TransNo
                }
            }
            public var query: Operations.TransactionTransactionGet.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.TransactionTransactionGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionTransactionGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionTransactionGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.TransactionTransactionGet.Input.Query,
                headers: Operations.TransactionTransactionGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TransactionRecordResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionTransactionGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionTransactionGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionTransactionGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionTransactionGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionTransactionGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionTransactionGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionTransactionGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionTransactionGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionTransactionGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionTransactionGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionTransactionGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/get(TransactionTransactionGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionTransactionGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes a Main transaction record as well as all Sub records
    ///
    /// - Remark: HTTP `DELETE /Transaction/DeleteMain`.
    /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)`.
    public enum TransactionDeletemainDelete {
        public static let id: String = "TransactionDeletemainDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/query/TransTypeName`.
                public var TransTypeName: Components.Schemas.TransTypeName
                /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/query/TransNo`.
                public var TransNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransTypeName:
                ///   - TransNo:
                public init(TransTypeName: Components.Schemas.TransTypeName, TransNo: Swift.Int) {
                    self.TransTypeName = TransTypeName
                    self.TransNo = TransNo
                }
            }
            public var query: Operations.TransactionDeletemainDelete.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionDeletemainDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionDeletemainDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionDeletemainDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.TransactionDeletemainDelete.Input.Query,
                headers: Operations.TransactionDeletemainDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionDeletemainDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletemainDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletemainDelete.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionDeletemainDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletemainDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletemainDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionDeletemainDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteMain/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletemainDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletemainDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteMain/delete(TransactionDeletemainDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionDeletemainDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Deletes a Sub transaction record (Also updates the current balance on the Main record and returns it)
    ///
    /// - Remark: HTTP `DELETE /Transaction/DeleteSub`.
    /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)`.
    public enum TransactionDeletesubDelete {
        public static let id: String = "TransactionDeletesubDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/query/TransTypeName`.
                public var TransTypeName: Components.Schemas.TransTypeName
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/query/TransNo`.
                public var TransNo: Swift.Int
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransTypeName:
                ///   - TransNo:
                ///   - IDNo:
                public init(TransTypeName: Components.Schemas.TransTypeName, TransNo: Swift.Int, IDNo: Swift.Int) {
                    self.TransTypeName = TransTypeName
                    self.TransNo = TransNo
                    self.IDNo = IDNo
                }
            }
            public var query: Operations.TransactionDeletesubDelete.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionDeletesubDelete.AcceptableContentType
                    >]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionDeletesubDelete.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionDeletesubDelete.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.TransactionDeletesubDelete.Input.Query,
                headers: Operations.TransactionDeletesubDelete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionDeletesubDelete.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletesubDelete.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletesubDelete.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionDeletesubDelete.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletesubDelete.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletesubDelete.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionDeletesubDelete.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/DeleteSub/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionDeletesubDelete.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionDeletesubDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/DeleteSub/delete(TransactionDeletesubDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionDeletesubDelete.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieve a list of records (Specifically for Transaction Listings that aren't registers)
    ///
    /// - Remark: HTTP `GET /Transaction/GetList`.
    /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)`.
    public enum TransactionGetlistGet {
        public static let id: String = "TransactionGetlistGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/GetList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/query/TransListType`.
                public var TransListType: Components.Schemas.TransListType
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/query/AccountNo`.
                public var AccountNo: Swift.String?
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/query/StartDate`.
                public var StartDate: Foundation.Date?
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/query/EndDate`.
                public var EndDate: Foundation.Date?
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransListType:
                ///   - AccountNo:
                ///   - StartDate:
                ///   - EndDate:
                public init(
                    TransListType: Components.Schemas.TransListType,
                    AccountNo: Swift.String? = nil,
                    StartDate: Foundation.Date? = nil,
                    EndDate: Foundation.Date? = nil
                ) {
                    self.TransListType = TransListType
                    self.AccountNo = AccountNo
                    self.StartDate = StartDate
                    self.EndDate = EndDate
                }
            }
            public var query: Operations.TransactionGetlistGet.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/GetList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.TransactionGetlistGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionGetlistGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionGetlistGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.TransactionGetlistGet.Input.Query,
                headers: Operations.TransactionGetlistGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TransactionList)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetlistGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetlistGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionGetlistGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetlistGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetlistGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionGetlistGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetlistGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetlistGet.Output.UnprocessableEntity.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionGetlistGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetList/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetlistGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetlistGet.Output.InternalServerError.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetList/get(TransactionGetlistGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionGetlistGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Retrieves a list with a running balance
    ///
    /// - Remark: HTTP `GET /Transaction/GetRegister`.
    /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)`.
    public enum TransactionGetregisterGet {
        public static let id: String = "TransactionGetregisterGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query/RegisterType`.
                public var RegisterType: Components.Schemas.RegisterType
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query/AccountNo`.
                public var AccountNo: Swift.String
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query/StartDate`.
                public var StartDate: Foundation.Date
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query/EndDate`.
                public var EndDate: Foundation.Date
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/query/EntityID`.
                public var EntityID: Swift.Int?
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - RegisterType:
                ///   - AccountNo:
                ///   - StartDate:
                ///   - EndDate:
                ///   - EntityID:
                public init(
                    RegisterType: Components.Schemas.RegisterType,
                    AccountNo: Swift.String,
                    StartDate: Foundation.Date,
                    EndDate: Foundation.Date,
                    EntityID: Swift.Int? = nil
                ) {
                    self.RegisterType = RegisterType
                    self.AccountNo = AccountNo
                    self.StartDate = StartDate
                    self.EndDate = EndDate
                    self.EntityID = EntityID
                }
            }
            public var query: Operations.TransactionGetregisterGet.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.TransactionGetregisterGet.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionGetregisterGet.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionGetregisterGet.Input.Headers
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.TransactionGetregisterGet.Input.Query,
                headers: Operations.TransactionGetregisterGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TransactionRegister)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetregisterGet.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetregisterGet.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionGetregisterGet.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetregisterGet.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetregisterGet.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionGetregisterGet.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetregisterGet.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetregisterGet.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionGetregisterGet.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/GetRegister/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionGetregisterGet.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionGetregisterGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/GetRegister/get(TransactionGetregisterGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionGetregisterGet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Create or Update a single Main transaction record (Generates a TransNo and returns it)
    ///
    /// - Remark: HTTP `PATCH /Transaction/PatchMain`.
    /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)`.
    public enum TransactionPatchmainPatch {
        public static let id: String = "TransactionPatchmainPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// Send a 0 to create a new record
                ///
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/query/TransNo`.
                public var TransNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransNo: Send a 0 to create a new record
                public init(TransNo: Swift.Int) { self.TransNo = TransNo }
            }
            public var query: Operations.TransactionPatchmainPatch.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.TransactionPatchmainPatch.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionPatchmainPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionPatchmainPatch.Input.Headers
            /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.TransactionPatchMain)
            }
            public var body: Operations.TransactionPatchmainPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.TransactionPatchmainPatch.Input.Query,
                headers: Operations.TransactionPatchmainPatch.Input.Headers = .init(),
                body: Operations.TransactionPatchmainPatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.TransactionPatchResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchmainPatch.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchmainPatch.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionPatchmainPatch.Output.Ok)
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchmainPatch.Output.BadRequest.Body
                public var id: UUID = UUID()
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchmainPatch.Output.BadRequest.Body) { self.body = body }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.TransactionPatchmainPatch.Output.BadRequest)
            public struct UnprocessableEntity: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchmainPatch.Output.UnprocessableEntity.Body
                public var id: UUID = UUID()
                /// Creates a new `UnprocessableEntity`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchmainPatch.Output.UnprocessableEntity.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Operations.TransactionPatchmainPatch.Output.UnprocessableEntity)
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchMain/PATCH/responses/500/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchmainPatch.Output.InternalServerError.Body
                public var id: UUID = UUID()
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchmainPatch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchMain/patch(TransactionPatchmainPatch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TransactionPatchmainPatch.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Creates a single Sub transaction record (Also updates the current balance on the Main record and returns it)
    ///
    /// - Remark: HTTP `PATCH /Transaction/PatchSub`.
    /// - Remark: Generated from `#/paths//Transaction/PatchSub/patch(TransactionPatchsubPatch)`.
    public enum TransactionPatchsubPatch {
        public static let id: String = "TransactionPatchsubPatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/query/TransTypeName`.
                public var TransTypeName: Components.Schemas.TransTypeName
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/query/TransNo`.
                public var TransNo: Swift.Int
                /// Send a 0 to create a new record
                ///
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/query/IDNo`.
                public var IDNo: Swift.Int
                public var id: UUID = UUID()
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - TransTypeName:
                ///   - TransNo:
                ///   - IDNo: Send a 0 to create a new record
                public init(TransTypeName: Components.Schemas.TransTypeName, TransNo: Swift.Int, IDNo: Swift.Int) {
                    self.TransTypeName = TransTypeName
                    self.TransNo = TransNo
                    self.IDNo = IDNo
                }
            }
            public var query: Operations.TransactionPatchsubPatch.Input.Query
            /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.TransactionPatchsubPatch.AcceptableContentType>]
                public var id: UUID = UUID()
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.TransactionPatchsubPatch.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.TransactionPatchsubPatch.Input.Headers
            /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.TransactionPatchSub)
            }
            public var body: Operations.TransactionPatchsubPatch.Input.Body
            public var id: UUID = UUID()
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.TransactionPatchsubPatch.Input.Query,
                headers: Operations.TransactionPatchsubPatch.Input.Headers = .init(),
                body: Operations.TransactionPatchsubPatch.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.TransactionPatchSubResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchsubPatch.Output.Ok.Body
                public var id: UUID = UUID()
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchsubPatch.Output.Ok.Body) { self.body = body }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchSub/patch(TransactionPatchsubPatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TransactionPatchsubPatch.Output.Ok)
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Transaction/PatchSub/PATCH/responses/default/content/application\/json`.
                    case json(Components.Schemas.CommonErrorResponse)
                }
                /// Received HTTP response body
                public var body: Operations.TransactionPatchsubPatch.Output.Default.Body
                public var id: UUID = UUID()
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TransactionPatchsubPatch.Output.Default.Body) { self.body = body }
            }
            /// Error
            ///
            /// - Remark: Generated from `#/paths//Transaction/PatchSub/patch(TransactionPatchsubPatch)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Int, Operations.TransactionPatchsubPatch.Output.Default)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(String)
            public init?(rawValue: String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
}
