//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftOpenAPIGenerator open source project
//
// Copyright (c) 2023 Apple Inc. and the SwiftOpenAPIGenerator project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftOpenAPIGenerator project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//
import OpenAPIKit

extension TypesFileTranslator {

    /// Returns a declaration of a code block containing the components
    /// namespace, which contains all the reusable component namespaces, such
    /// as for schemas, parameters, and response headers.
    /// - Parameters:
    ///   - components: The components defined in the OpenAPI document.
    ///   - multipartSchemaNames: The names of schemas used as root multipart content.
    /// - Returns: A code block with the enum representing the components
    /// namespace.
    /// - Throws: An error if there's an issue during translation of components.
    func wrapDeclarationInCodeBlock(_ declaration: Declaration) -> CodeBlock {
    // Implementation depends on how CodeBlock and Declaration are defined
    // This is just a conceptual example
    return CodeBlock.declaration(declaration)
}
func translateComponentsToFiles(_ components: OpenAPI.Components, multipartSchemaNames: Set<OpenAPI.ComponentKey>) throws -> [FileDescription] {
    var files: [FileDescription] = []

    // Assuming `translateSchemas` and similar functions now return `CodeBlock` instead of `Declaration`
    // and assuming there exists a function to wrap a `CodeBlock` in a `FileDescription`

    // Translate schemas to their own file
    let schemasCodeBlock = try translateSchemas(components.schemas, multipartSchemaNames: multipartSchemaNames)
    let schemasFile = createFileDescription(from: wrapDeclarationInCodeBlock(schemasCodeBlock), fileName: "Schemas.swift")
    files.append(schemasFile)

    // Translate parameters to their own file
    let parametersCodeBlock = try translateComponentParameters(components.parameters)
    let parametersFile = createFileDescription(from: wrapDeclarationInCodeBlock(parametersCodeBlock), fileName: "Parameters.swift")
    files.append(parametersFile)

    // Translate requestBodies to their own file
    let requestBodiesCodeBlock = try translateComponentRequestBodies(components.requestBodies)
    let requestBodiesFile = createFileDescription(from: wrapDeclarationInCodeBlock(requestBodiesCodeBlock), fileName: "RequestBodies.swift")
    files.append(requestBodiesFile)

    // Translate responses to their own file
    let responsesCodeBlock = try translateComponentResponses(components.responses)
    let responsesFile = createFileDescription(from: wrapDeclarationInCodeBlock(responsesCodeBlock), fileName: "Responses.swift")
    files.append(responsesFile)

    // Translate headers to their own file
    let headersCodeBlock = try translateComponentHeaders(components.headers)
    let headersFile = createFileDescription(from: wrapDeclarationInCodeBlock(headersCodeBlock), fileName: "Headers.swift")
    files.append(headersFile)

    return files
}
private func createFileDescription(from codeBlock: CodeBlock, fileName: String) -> FileDescription {
    // Boilerplate for a valid Swift file, such as imports
    let topComment: Comment = .inline("""
        // This source file was generated by SwiftOpenAPIGenerator
        // Copyright (c) 2023 by the project authors
        // Licensed under Apache License v2.0
        """)

    let imports: [ImportDescription] = [ImportDescription(moduleName: "Foundation"), ImportDescription(moduleName: "OpenAPIKit")]

    // Wrap the provided code block in a FileDescription
    let file = FileDescription(
        topComment: topComment,
        imports: imports,
        codeBlocks: [codeBlock]
    )

    return file
}
    func translateComponents(_ components: OpenAPI.Components, multipartSchemaNames: Set<OpenAPI.ComponentKey>) throws
        -> CodeBlock
    {

        let schemas = try translateSchemas(components.schemas, multipartSchemaNames: multipartSchemaNames)
        let parameters = try translateComponentParameters(components.parameters)
        let requestBodies = try translateComponentRequestBodies(components.requestBodies)
        let responses = try translateComponentResponses(components.responses)
        let headers = try translateComponentHeaders(components.headers)

        let componentsDecl: Declaration = .commentable(
            .doc(
                """
                Types generated from the components section of the OpenAPI document.
                """
            ),
            .enum(
                .init(
                    accessModifier: config.access,
                    name: "Components",
                    members: [schemas, parameters, requestBodies, responses, headers]
                )
            )
        )
        return .declaration(componentsDecl)
    }
}
